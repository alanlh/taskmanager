{"version":3,"sources":["data/CompletionStatus.ts","data/JobType.ts","data/ChangeType.ts","database/tables/TrackingTable.ts","database/tables/Table.ts","database/tables/StatusDefinitionTable.ts","database/tables/tracked/StatusLogTable.ts","database/tables/JobTable.ts","database/tables/tracked/DueDateLogTable.ts","database/tables/TimeLogTable.ts","database/tables/StatusTable.ts","database/tables/tracked/TimeLogHistoryTable.ts","data/LocalSettingType.ts","database/tables/LocalSettingsTable.ts","database/tables/tracked/EstimatedTimeBestCaseTable.ts","database/tables/tracked/EstimatedTimeExpectedTable.ts","database/tables/tracked/EstimatedTimeWorstCaseTable.ts","database/LocalDatabase.ts","operations/DatabaseOps.ts","operations/LocalSettingOps.ts","operations/JobOps.ts","operations/StatusDefinitionOps.ts","operations/StatusOps.ts","components/fields/CompletionStatusField.tsx","components/fields/DueDateField.tsx","operations/TimeLogOps.ts","components/fields/DurationField.tsx","components/fields/TextInputField.tsx","components/fields/TimeLogField.tsx","components/body/timelog/TimeLogEntryNew.tsx","operations/UtilityHooks.ts","utility/StringUtility.ts","components/popup/PopupContainer.tsx","components/body/jobs/TaskLine.tsx","components/body/jobs/ProjectLine.tsx","components/fields/DescriptionField.tsx","components/fields/NameField.tsx","components/body/timelog/TimeLogEntry.tsx","components/body/timelog/TimeLogList.tsx","components/body/jobs/JobPopup.tsx","components/body/Body.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CompletionStatus","CompletionStatusType","getCompletionStatusKey","status","JobType","CompletionStatusNames","Planned","InProgress","Completed","Void","getCompletionStatusName","ChangeType","TrackingTableColumn","Table","tableName","keyColumn","columnParams","columnEnum","columnCount","columnNames","defaultValueGenerators","indexedColumns","Set","trackingTables","Map","_data","_indices","this","__LENGTH","column","columnData","getColumnData","push","columnName","indexed","add","set","defaultValueGenerator","trackingTable","has","key","row","get","undefined","value","isIndexed","checkIndexed","prevValue","removeFromIndex","addToIndex","initialValues","map","generator","i","length","console","error","warn","getColumnName","Array","from","getIndexSet","delete","size","replace","c","r","Math","random","toString","date","toUTCString","string","Date","parse","StatusDefinitionColumn","TrackingTable","LOG_ID","getUniqueKey","LOG_TIME","ENTRY_ID","ENTRY_TYPE","Update","ENTRY_VALUE","getUuid","StatusLogTable","JobColumn","StatusDefinitionTable","KEY","TYPE","NAME","DESCRIPTION","createRow","DueDateLogTable","TimeLogColumns","JobTable","ID","JOB_TYPE","Task","CHILD_TASK_OF","CHILD_PROJECT_OF","DUE_DATE","Tables","DueDateLog","BEST_CASE_TIME","EstTimeBest","ESTIMATED_TIME","EstTimeExpected","WORST_CASE_TIME","EstTimeWorst","MINUTES_SPENT","StatusTableColumns","TimeLogTable","JOB_ID","VALUE","TimeLogHistory","TimeLogHistoryTable","LocalSettingType","LocalSettingsColumns","StatusTable","STATUS_ENTRY_ID","STATUS_VALUE","StatusLog","STATUS_TYPE","EstimatedTimeBestCaseTable","EstimatedTimeExpectedTable","EstimatedTimeWorstCaseTable","LocalSettingsTable","SETTING_TYPE","Error","JOB_WITH_POPUP_OPEN","DatabaseTables","Jobs","StatusDefinitions","Status","TimeLog","LocalSettings","Database","tableListeners","rowListeners","cellListeners","columnListeners","indexListeners","onLoad","log","table","getData","tableType","getRowsWithIndex","previousValue","getCell","_setCell","setData","_updateChangeTracking","_triggerIndexChange","changeType","trackingTableRow","generateDefaultRow","triggerCallbackSet","callbackSet","callback","getTableColumnCount","fill","rowId","Create","valueListeners","listener","tableListener","rowListener","columnListener","loadInitialData","DatabaseOps","useCellState","useState","setValue","onDatabaseChange","useCallback","useEffect","addCellListener","removeCellListener","newValue","setCell","useReadonlyCellState","useIndexState","getIndex","initialValue","useRef","current","indices","setIndices","newValues","addIndexListener","removeIndexListener","useRelatedIndexState","indexedColumn","relatedColumn","getRelatedValues","getIndexState","relatedValues","setRelatedValues","getCellState","setCellState","LocalSettingOps","useJobWithPopupOpen","requestOpenPopup","jobId","closePopup","JobOps","useName","useDescription","useJobType","useDueDate","useTimeSpent","useChildTasks","projectId","useRootTasks","useChildProjects","useRootProjects","createRootProject","createChildProject","createRootTask","createChildTask","defaultValues","Project","completionStatusValue","StatusDefinitionOps","useStatusName","statusType","type","LocalDatabase","assert","useAllStatusValuesAndNames","StatusOps","useCompletionStatus","completionStatusId","useMemo","statusIdsForJob","statusId","CompletionStatusField","id","completionStatus","setCompletionStatus","statusValuesAndNames","setCheckboxStatus","e","currentTarget","checked","setSelectStatus","className","onChange","index","name","DueDateField","dueDate","setDueDate","onChangeDueDate","valueAsDate","toISOString","substr","TimeLogOps","useLoggedTime","duration","createTimeLogEntry","useEntryIdsForJob","useEntryValues","logId","useTimeValue","timeValue","setTimeValue","updateTimeValue","taskId","updateTimeSpentForJobs","description","entryRow","newDuration","previousDuration","diff","currentTime","projectAncestorId","DurationField","forwardRef","ref","time","setTime","readonly","minutes","hours","setInputHours","valueAsNumber","setInputMinutes","min","max","step","readOnly","TextInputField","params","rows","match","minRows","maxRows","defaultOnFocus","setEditMode","defaultOnBlur","multiRow","editMode","onFocus","setEditModeOnFocus","onBlur","TimeLogField","setDuration","setDescription","allowToggleEditMode","onSetEditable","onSubmit","onSetReadonly","allowDelete","onDelete","durationRef","editButtonRef","onSave","focus","onClickEditButton","select","onClickCancelButton","onClick","hidden","TimeLogEntryNew","onLog","onCancel","logInputTime","useToggleState","state","setState","toggleState","enableState","disableState","useSaveableState","valueFromSave","setValueFromSave","allowExternalUpdates","savedValue","setSavedValue","localValue","setLocalValue","formatDuration","floor","PopupContainer","isOpen","onClose","children","showCloseButton","onRequestClose","closeOnEsc","closeOnOverlayClick","appElement","document","body","shouldCloseOnEsc","shouldCloseOnOverlayClick","TaskLine","timeSpent","bodyVisible","setBodyVisible","toggleBodyVisible","isTimeLogWidgetOpen","showTimeLogWidget","closeTimeLogWidget","ProjectLine","childTaskIds","childProjectIds","onCreateChildProject","onCreateChildTask","Fragment","DescriptionField","NameField","setName","TimeLogEntry","timeLogId","setEditable","setReadonly","setLocalDescription","saveDescription","setLocalTimeValue","saveTimeValue","TimeLogList","jobType","timeLogEntries","isNewEntryShown","hideNewEntry","toggleNewEntry","entryId","JobPopup","Body","taskIds","rootProjects","openedJobId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5ed55c6b.chunk.js","sourcesContent":["const CompletionStatusType = \"CompletionStatus\";\r\nexport {CompletionStatusType};\r\n\r\nexport enum CompletionStatus {\r\n  Planned,\r\n  InProgress,\r\n  Completed,\r\n  Void,\r\n}\r\n\r\nexport function getCompletionStatusKey(status: CompletionStatus) {\r\n  return `${CompletionStatusType}_${CompletionStatus[status]}`;\r\n}\r\n\r\nconst CompletionStatusNames = {\r\n  [CompletionStatus.Planned]: \"Planned\",\r\n  [CompletionStatus.InProgress]: \"In Progress\",\r\n  [CompletionStatus.Completed]: \"Completed\",\r\n  [CompletionStatus.Void]: \"Void\",\r\n}\r\n\r\nexport function getCompletionStatusName(status: CompletionStatus) {\r\n  return CompletionStatusNames[status];\r\n}","// This shouldn't be customizable.\r\n\r\nexport enum JobType {\r\n  Task = \"JobType_Task\",\r\n  Project = \"JobType_Project\",\r\n}","export enum ChangeType {\r\n  Create,\r\n  Update,\r\n  Delete,\r\n}","import { ChangeType } from \"../../data/ChangeType\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum TrackingTableColumn {\r\n  LOG_ID, LOG_TIME,\r\n  ENTRY_ID, ENTRY_TYPE, ENTRY_VALUE,\r\n\r\n  __LENGTH\r\n}\r\n\r\ntype ValidTrackingTableColumn = Exclude<TrackingTableColumn, TrackingTableColumn.__LENGTH>;\r\n\r\ntype TrackingTableColumnTypes<ValueType> = [\r\n  string, Date,\r\n  string, ChangeType, ValueType\r\n];\r\n\r\ninterface ITrackingTableParams<ValueType> {\r\n  tableName: string,\r\n  defaultValueGenerator: () => ValueType,\r\n}\r\n\r\nexport default abstract class TrackingTable<ValueType> extends Table<ValidTrackingTableColumn, TrackingTableColumnTypes<ValueType>,\r\n  TrackingTableColumnTypes<ValueType>[TrackingTableColumn.LOG_ID]> {\r\n  constructor({\r\n    tableName, defaultValueGenerator,\r\n  }: ITrackingTableParams<ValueType>) {\r\n    super({\r\n      tableName: tableName,\r\n      keyColumn: TrackingTableColumn.LOG_ID,\r\n      columnEnum: TrackingTableColumn,\r\n      columnParams: {\r\n        [TrackingTableColumn.LOG_ID]: {\r\n          defaultValueGenerator: () => this.getUniqueKey(),\r\n        },\r\n        [TrackingTableColumn.LOG_TIME]: {\r\n          defaultValueGenerator: () => new Date(),\r\n        },\r\n        [TrackingTableColumn.ENTRY_ID]: {\r\n          defaultValueGenerator: () => \"\",\r\n          indexed: true,\r\n        },\r\n        [TrackingTableColumn.ENTRY_TYPE]: {\r\n          defaultValueGenerator: () => ChangeType.Update,\r\n        },\r\n        [TrackingTableColumn.ENTRY_VALUE]: {\r\n          defaultValueGenerator: defaultValueGenerator,\r\n        },\r\n      }\r\n    });\r\n  }\r\n\r\n  protected getUniqueKey() {\r\n    return this.getUuid();\r\n  }\r\n}","import { ArrayToRecord, DefaultValueGeneratorArray, OptionalTuple } from \"../../utility/Types\";\r\nimport { TrackedTables } from \"../LocalDatabase\";\r\n\r\nexport default abstract class Table<CDef extends number, CType extends any[], KeyType> {\r\n  public readonly tableName: string;\r\n  public readonly columnCount: number;\r\n  public readonly keyColumn: CDef;\r\n  public readonly columnEnum: Record<number, string> & { \"__LENGTH\": number };\r\n\r\n  public readonly columnNames: Record<CDef, string> = [];\r\n\r\n  public readonly columnParams: GenericColumnDefParams<CType>;\r\n\r\n  public readonly defaultValueGenerators: OptionalTuple<DefaultValueGeneratorArray<CType>>;\r\n  public readonly indexedColumns: Set<CDef> = new Set();\r\n  public readonly trackingTables: ReadonlyMap<CDef, TrackedTables> = new Map();\r\n  \r\n  protected _data: Map<KeyType, CType> = new Map();\r\n\r\n  public _indices: Map<CDef, Map<any, Set<KeyType>>> = new Map();\r\n\r\n  public constructor({ tableName, keyColumn, columnParams, columnEnum }: TableParameters<CDef, CType>) {\r\n    this.tableName = tableName;\r\n    this.columnCount = columnEnum.__LENGTH;\r\n    this.keyColumn = keyColumn;\r\n    this.columnParams = columnParams;\r\n    this.columnEnum = columnEnum;\r\n\r\n    this.defaultValueGenerators = [] as unknown as OptionalTuple<DefaultValueGeneratorArray<CType>>;\r\n    \r\n    for (let column = 0; column < this.columnCount; column++) {\r\n      const columnData = this.getColumnData(column as CDef);\r\n\r\n      (this.columnNames as string[]).push(columnData.columnName ? columnData.columnName : columnEnum[column]);\r\n\r\n      if (columnData.indexed) {\r\n        this.indexedColumns.add(column as CDef);\r\n        this._indices.set(column as CDef, new Map());\r\n      }\r\n\r\n      this.defaultValueGenerators.push(columnData.defaultValueGenerator); // i hate typescript\r\n      \r\n      if (columnData.trackingTable) {\r\n        (this.trackingTables as Map<CDef, TrackedTables>).set(column as CDef, columnData.trackingTable);\r\n      }\r\n    }\r\n  }\r\n\r\n  public onLoad() {\r\n    \r\n  }\r\n\r\n  //#region Table metadata\r\n\r\n  protected getColumnData<T extends CDef>(column: T): ColumnDefParams<CType[T]> {\r\n    return this.columnParams[column as never] as unknown as ColumnDefParams<CType[T]>\r\n  }\r\n\r\n  public getColumnName(column: CDef): string {\r\n    return this.columnNames[column];\r\n  }\r\n\r\n  private checkIndexed(column: CDef) {\r\n    return this.indexedColumns.has(column);\r\n  }\r\n\r\n  //#endregion Table metadata\r\n\r\n  //#region Data getters/setters\r\n  \r\n  public checkRowExists(key: KeyType): boolean {\r\n    return this._data.has(key);\r\n  }\r\n\r\n  public getData<T extends CDef>(key: KeyType, column: T): CType[T] | undefined {\r\n    const row = this._data.get(key);\r\n    return row ? row[column] : undefined;\r\n  }\r\n\r\n  public setData<T extends CDef>(key: KeyType, column: T, value: CType[T]): void {\r\n    const row = this._data.get(key);\r\n    if (!row) {\r\n      return;\r\n    }\r\n    const isIndexed = this.checkIndexed(column);\r\n    if (isIndexed) {\r\n      const prevValue = row[column];\r\n      this.removeFromIndex(column, prevValue, key);\r\n    }\r\n    row[column] = value;\r\n    if (isIndexed) {\r\n      this.addToIndex(column, value, key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new row in the database with all values empty except for a key.\r\n   */\r\n  public createRow(initialValues?: OptionalTuple<CType>): KeyType {\r\n    const row = this.defaultValueGenerators.map((generator) => generator ? generator() : undefined) as CType;\r\n    if (initialValues !== undefined) {\r\n      for (let i = 0; i < row.length; i++) {\r\n        if (initialValues[i as CDef] !== undefined) {\r\n          row[i] = initialValues[i as CDef];\r\n          continue;\r\n        }\r\n        if (this.defaultValueGenerators[i] === undefined) {\r\n          console.error(\"Unable to create row. Column \", this.columnEnum[i], \" in table \", this.tableName, \" does not have a default value.\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // At this point, every cell in the row should have a value. Now just make sure that the key is unique.\r\n    let key: KeyType = row[this.keyColumn];\r\n    if (this._data.has(key)) {\r\n      console.error(\"Key\", key, \"already exists for table\", this.tableName);\r\n    }\r\n    this._data.set(key, row);\r\n    for (const column of this.indexedColumns) {\r\n      this.addToIndex(column, row[column], key);\r\n    }\r\n    return key;\r\n  }\r\n\r\n  //#endregion Data getters/setters\r\n\r\n  //#region Index manipulation\r\n\r\n  public hasRowWithIndex<T extends CDef>(column: T, value: CType[T]): boolean {\r\n    if (!this.checkIndexed(column)) {\r\n      console.warn(`Table ${this.tableName} does not have an index on column ${this.getColumnName(column)}.`);\r\n      return false;\r\n    }\r\n    return this._indices.get(column)!.has(value);\r\n  }\r\n\r\n  public getRowsWithIndex<T extends CDef>(column: T, value: CType[T]): KeyType[] {\r\n    if (!this.checkIndexed(column)) {\r\n      console.warn(`Table ${this.tableName} does not have an index on column ${this.getColumnName(column)}.`);\r\n      return [];\r\n    }\r\n    return Array.from(this._indices.get(column)!.get(value) || []);\r\n  }\r\n\r\n  private getIndexSet<T extends CDef>(column: T, value: CType[T] | undefined): Set<KeyType> | undefined {\r\n    return this._indices.get(column)!.get(value);\r\n  }\r\n\r\n  private addToIndex<T extends CDef>(column: CDef, value: CType[T] | undefined, key: KeyType): void {\r\n    let set = this.getIndexSet(column, value);\r\n    if (set === undefined) {\r\n      set = new Set();\r\n      this._indices.get(column)!.set(value, set);\r\n    }\r\n    set.add(key);\r\n  }\r\n\r\n  private removeFromIndex<T extends CDef>(column: CDef, value: CType[T] | undefined, key: KeyType): void {\r\n    let set = this.getIndexSet(column, value)!;\r\n    set.delete(key);\r\n    if (set.size === 0) {\r\n      this._indices.get(column)!.delete(value);\r\n    }\r\n  }\r\n\r\n  //#endregion Index manipulation\r\n\r\n  //#region Loading and Saving\r\n\r\n  protected static toStringDate(date: Date): string {\r\n    // TODO: Fix later.\r\n    return date.toUTCString();\r\n  }\r\n\r\n  protected static fromStringDate(string: string): Date {\r\n    // TODO: Probably incorrect, fix later.\r\n    return new Date(Date.parse(string));\r\n  }\r\n\r\n  protected static identityString(string: string): string {\r\n    return string;\r\n  }\r\n\r\n  //#endregion Loading and Saving\r\n\r\n  /**\r\n   * Copied from https://stackoverflow.com/a/2117523\r\n   * @returns An almost unique identifier\r\n   */\r\n  protected getUuid(): string {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n}\r\n\r\ninterface TableParameters<CDef extends number, CType extends any[]> {\r\n  tableName: string,\r\n  columnParams: GenericColumnDefParams<CType>,\r\n  keyColumn: CDef,\r\n  columnEnum: Record<number, string> & {\"__LENGTH\": number},\r\n};\r\n\r\ntype ColumnDefParams<T> = {\r\n  columnName?: string,\r\n  defaultValueGenerator?: () => T,\r\n  trackingTable?: TrackedTables,\r\n  indexed?: boolean,\r\n  // toString: (val: T) => string,\r\n  // fromString: (val: string) => T,\r\n};\r\n\r\nexport type GenericColumnDefParams<CType extends any[]> = ArrayToRecord<\r\n{\r\n  [K in keyof CType]: ColumnDefParams<CType[K]>\r\n}>;","import { CompletionStatusType, CompletionStatus, getCompletionStatusKey, getCompletionStatusName } from \"../../data/CompletionStatus\";\r\nimport Table, { GenericColumnDefParams } from \"./Table\";\r\n\r\nexport enum StatusDefinitionColumn {\r\n  KEY, TYPE, NAME, DESCRIPTION,\r\n\r\n  __LENGTH\r\n}\r\n\r\ntype ValidStatusDefinitionColumn = Exclude<StatusDefinitionColumn, StatusDefinitionColumn.__LENGTH>;\r\n\r\ntype StatusDefinitionColumnTypes = [string, string, string, string];\r\n\r\nexport default class StatusDefinitionTable extends Table<ValidStatusDefinitionColumn,\r\n  StatusDefinitionColumnTypes, StatusDefinitionColumnTypes[StatusDefinitionColumn.KEY]> {\r\n  \r\n  constructor() {\r\n    super({\r\n      tableName: \"STATUS_DEFINTIIONS\",\r\n      columnParams: {\r\n        [StatusDefinitionColumn.KEY]: {\r\n          defaultValueGenerator: () => this.getUniqueKey(),\r\n          indexed: true,\r\n        },\r\n        [StatusDefinitionColumn.TYPE]: {\r\n          indexed: true,\r\n          defaultValueGenerator: () => \"\",\r\n        },\r\n        [StatusDefinitionColumn.NAME]: {\r\n          defaultValueGenerator: () => \"\",\r\n        },\r\n        [StatusDefinitionColumn.DESCRIPTION]: {\r\n          defaultValueGenerator: () => \"\",\r\n        } \r\n      },\r\n      keyColumn: StatusDefinitionColumn.KEY,\r\n      columnEnum: StatusDefinitionColumn,\r\n    })\r\n  }\r\n\r\n  public onLoad() {\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.Planned), CompletionStatusType, getCompletionStatusName(CompletionStatus.Planned), \"Planned Description\"]);\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.InProgress), CompletionStatusType, getCompletionStatusName(CompletionStatus.InProgress), \"In Progress Description\"]);\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.Completed), CompletionStatusType, getCompletionStatusName(CompletionStatus.Completed), \"Completed Description\"]);\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.Void), CompletionStatusType, getCompletionStatusName(CompletionStatus.Void), \"Void Description\"]);\r\n  }\r\n  \r\n  protected getUniqueKey(): string {\r\n    return this.getUuid();\r\n  }\r\n\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class StatusLogTable extends TrackingTable<string> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"STATUS_TABLE_LOG\",\r\n      defaultValueGenerator: () => \"\",\r\n    })\r\n  }\r\n}","import { JobType } from \"../../data/JobType\";\r\nimport { Tables } from \"../LocalDatabase\";\r\nimport Table from \"./Table\";\r\nimport TrackingTable from \"./TrackingTable\";\r\n\r\nexport enum JobColumn {\r\n  ID, NAME, JOB_TYPE,\r\n  CHILD_TASK_OF, CHILD_PROJECT_OF,\r\n  DESCRIPTION, DUE_DATE,\r\n  BEST_CASE_TIME, ESTIMATED_TIME, WORST_CASE_TIME,\r\n  MINUTES_SPENT,\r\n\r\n  __LENGTH\r\n}\r\ntype ValidJobColumn = Exclude<JobColumn, JobColumn.__LENGTH>;\r\ntype JobColumnTypes = [\r\n  string, string, JobType,\r\n  string | undefined, string | undefined,\r\n  string, Date,\r\n  number, number, number,\r\n  number,\r\n];\r\n\r\nexport default class JobTable extends Table<ValidJobColumn, JobColumnTypes, JobColumnTypes[JobColumn.ID]> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"JOBS\",\r\n      keyColumn: JobColumn.ID,\r\n      columnEnum: JobColumn,\r\n      columnParams: {\r\n        [JobColumn.ID]: {\r\n          columnName: \"ID\",\r\n          defaultValueGenerator: () => this.getUniqueKey(),\r\n        },\r\n        [JobColumn.NAME]: {\r\n          columnName: \"NAME\",\r\n          defaultValueGenerator: () => \"\",\r\n        },\r\n        [JobColumn.JOB_TYPE]: {\r\n          defaultValueGenerator: () => JobType.Task,\r\n          indexed: true,\r\n        },\r\n        [JobColumn.CHILD_TASK_OF]: {\r\n          defaultValueGenerator: () => undefined,\r\n          indexed: true,\r\n        },\r\n        [JobColumn.CHILD_PROJECT_OF]: {\r\n          defaultValueGenerator: () => undefined,\r\n          indexed: true,\r\n        },\r\n        [JobColumn.DESCRIPTION]: {\r\n          defaultValueGenerator: () => \"\",\r\n        },\r\n        [JobColumn.DUE_DATE]: {\r\n          defaultValueGenerator: () => new Date(),\r\n          trackingTable: Tables.DueDateLog,\r\n        },\r\n        [JobColumn.BEST_CASE_TIME]: {\r\n          defaultValueGenerator: () => 0,\r\n          trackingTable: Tables.EstTimeBest,\r\n        },\r\n        [JobColumn.ESTIMATED_TIME]: {\r\n          defaultValueGenerator: () => 0,\r\n          trackingTable: Tables.EstTimeExpected,\r\n        },\r\n        [JobColumn.WORST_CASE_TIME]: {\r\n          defaultValueGenerator: () => 0,\r\n          trackingTable: Tables.EstTimeWorst,\r\n        },\r\n        [JobColumn.MINUTES_SPENT]: {\r\n          defaultValueGenerator: () => 0,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  protected getUniqueKey() {\r\n    return this.getUuid();\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class DueDateLogTable extends TrackingTable<Date> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"DUE_DATE_LOG\",\r\n      defaultValueGenerator: () => new Date(),\r\n    });\r\n  }\r\n}\r\n\r\n","import { Tables } from \"../LocalDatabase\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum TimeLogColumns {\r\n  LOG_ID, JOB_ID, VALUE,\r\n  DESCRIPTION,\r\n\r\n  __LENGTH,\r\n}\r\n\r\ntype ValidTimeLogColumn = Exclude<TimeLogColumns, TimeLogColumns.__LENGTH>;\r\n\r\ntype TimeLogColumnTypes = [\r\n  string, string, number, string,\r\n]\r\n\r\nexport default class TimeLogTable extends Table<ValidTimeLogColumn, TimeLogColumnTypes, TimeLogColumnTypes[TimeLogColumns.LOG_ID]> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"TIME_LOG\",\r\n      keyColumn: TimeLogColumns.LOG_ID,\r\n      columnEnum: TimeLogColumns,\r\n      columnParams: {\r\n        [TimeLogColumns.LOG_ID]: {\r\n          defaultValueGenerator: () => this.getUniqueKey(),\r\n        },\r\n        [TimeLogColumns.JOB_ID]: {\r\n          defaultValueGenerator: () => \"\",\r\n          indexed: true,\r\n        },\r\n        [TimeLogColumns.VALUE]: {\r\n          defaultValueGenerator: () => 0,\r\n          trackingTable: Tables.TimeLogHistory,\r\n        },\r\n        [TimeLogColumns.DESCRIPTION]: {\r\n          defaultValueGenerator: () => \"\",\r\n        },\r\n      }\r\n    });\r\n  }\r\n  \r\n  protected getUniqueKey(): string {\r\n    return this.getUuid();\r\n  }\r\n  \r\n}","import { Tables } from \"../LocalDatabase\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum StatusTableColumns {\r\n  STATUS_ENTRY_ID,\r\n  STATUS_VALUE,\r\n  STATUS_TYPE,\r\n  JOB_ID,\r\n\r\n  __LENGTH,\r\n}\r\n\r\ntype ValidStatusTableColumn = Exclude<StatusTableColumns, StatusTableColumns.__LENGTH>;\r\n\r\ntype StatusTableColumnTypes = [\r\n  string,\r\n  string,\r\n  string,\r\n  string,\r\n]\r\n\r\nexport default class StatusTable extends Table<ValidStatusTableColumn, StatusTableColumnTypes, StatusTableColumnTypes[StatusTableColumns.STATUS_ENTRY_ID]> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"STATUS_TABLE\",\r\n      columnEnum: StatusTableColumns,\r\n      keyColumn: StatusTableColumns.STATUS_ENTRY_ID,\r\n      columnParams: {\r\n        [StatusTableColumns.STATUS_ENTRY_ID]: {\r\n          defaultValueGenerator: () => this.getUniqueKey(),\r\n        },\r\n        [StatusTableColumns.STATUS_VALUE]: {\r\n          defaultValueGenerator: () => \"\",\r\n          indexed: true,\r\n          trackingTable: Tables.StatusLog,\r\n        },\r\n        [StatusTableColumns.STATUS_TYPE]: {\r\n          defaultValueGenerator: () => \"\",\r\n          indexed: true,\r\n        },\r\n        [StatusTableColumns.JOB_ID]: {\r\n          defaultValueGenerator: () => \"\",\r\n          indexed: true,\r\n        },\r\n      }\r\n    })\r\n  }\r\n\r\n  protected getUniqueKey(): string {\r\n    return this.getUuid();\r\n  }\r\n  \r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class TimeLogHistoryTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"TIME_LOG_HISTORY\",\r\n      defaultValueGenerator: () => 0,\r\n    });\r\n  }\r\n}","export enum LocalSettingType {\r\n  JOB_WITH_POPUP_OPEN,\r\n}","import { LocalSettingType } from \"../../data/LocalSettingType\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum LocalSettingsColumns {\r\n  SETTING_TYPE, VALUE,\r\n\r\n  __LENGTH,\r\n}\r\n\r\ntype ValidLocalSettingColumn = Exclude<LocalSettingsColumns, LocalSettingsColumns.__LENGTH>;\r\n\r\ntype LocalSettingColumnType = [\r\n  LocalSettingType, any\r\n]\r\n\r\nexport default class LocalSettingsTable extends Table<ValidLocalSettingColumn, LocalSettingColumnType, LocalSettingColumnType[LocalSettingsColumns.SETTING_TYPE]> {\r\n  public constructor() {\r\n    super({\r\n      tableName: \"LOCAL_SETTINGS_TABLE\",\r\n      keyColumn: LocalSettingsColumns.SETTING_TYPE,\r\n      columnEnum: LocalSettingsColumns,\r\n      columnParams: {\r\n        [LocalSettingsColumns.SETTING_TYPE]: {\r\n          \r\n        },\r\n        [LocalSettingsColumns.VALUE]: {\r\n          \r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  protected getUniqueKey(): boolean {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  public onLoad() {\r\n    this.createRow([LocalSettingType.JOB_WITH_POPUP_OPEN, undefined]);\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class EstimatedTimeBestCaseTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"ESTIMATED_TIME_BEST_CASE\",\r\n      defaultValueGenerator: () => 0,\r\n    });\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class EstimatedTimeExpectedTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"ESTIMATED_TIME_EXPECTED\",\r\n      defaultValueGenerator: () => 0,\r\n    });\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class EstimatedTimeWorstCaseTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"ESTIMATED_TIME_WORST_CASE\",\r\n      defaultValueGenerator: () => 0,\r\n    });\r\n  }\r\n}","import StatusLogTable from \"./tables/tracked/StatusLogTable\";\r\nimport StatusDefinitionTable from \"./tables/StatusDefinitionTable\";\r\nimport Table from \"./tables/Table\";\r\nimport DueDateLogTable from \"./tables/tracked/DueDateLogTable\";\r\nimport JobTable from \"./tables/JobTable\";\r\nimport TimeLogTable from \"./tables/TimeLogTable\";\r\nimport TimeLogHistoryTable from \"./tables/tracked/TimeLogHistoryTable\";\r\nimport StatusTable from \"./tables/StatusTable\";\r\nimport { TrackingTableColumn } from \"./tables/TrackingTable\";\r\nimport { ChangeType } from \"../data/ChangeType\";\r\nimport EstimatedTimeBestCaseTable from \"./tables/tracked/EstimatedTimeBestCaseTable\";\r\nimport EstimatedTimeExpectedTable from \"./tables/tracked/EstimatedTimeExpectedTable\";\r\nimport EstimatedTimeWorstCaseTable from \"./tables/tracked/EstimatedTimeWorstCaseTable\";\r\nimport { OptionalTuple } from \"../utility/Types\";\r\nimport LocalSettingsTable from \"./tables/LocalSettingsTable\";\r\n\r\nexport enum Tables {\r\n  Jobs = \"Jobs\",\r\n  StatusDefinitions = \"StatusDefinitions\",\r\n  StatusLog = \"StatusLog\",\r\n  Status = \"Status\",\r\n  DueDateLog = \"DueDateLog\",\r\n  TimeLog = \"TimeLog\",\r\n  TimeLogHistory = \"TimeLogHistory\",\r\n\r\n  EstTimeBest = \"EstTimeBest\",\r\n  EstTimeExpected = \"EstTimeExpected\",\r\n  EstTimeWorst = \"EstTimeWorst\",\r\n\r\n  LocalSettings = \"LocalSettings\",\r\n}\r\n\r\nexport type TrackedTables = Tables.DueDateLog | Tables.TimeLogHistory | Tables.StatusLog\r\n  | Tables.EstTimeBest | Tables.EstTimeExpected | Tables.EstTimeWorst;\r\n\r\n// There are a lot of hacks relating to types in the code below.\r\n// Most of them are due to limitations on Typescript's support for containers of different types.\r\n// But since the main goal of this class is to define behavior shared between all Tables,\r\n// it doesn't matter as much. \r\n// The alternative is to use \"any\" everywhere, which also means little type checking.\r\n// But it would also provide no benefit to consumer code.\r\n\r\nconst DatabaseTables = {\r\n  [Tables.Jobs]: new JobTable(),\r\n  [Tables.StatusDefinitions]: new StatusDefinitionTable(),\r\n  [Tables.StatusLog]: new StatusLogTable(),\r\n  [Tables.Status]: new StatusTable(),\r\n  [Tables.DueDateLog]: new DueDateLogTable(),\r\n  [Tables.TimeLog]: new TimeLogTable(),\r\n  [Tables.TimeLogHistory]: new TimeLogHistoryTable(),\r\n  [Tables.EstTimeBest]: new EstimatedTimeBestCaseTable(),\r\n  [Tables.EstTimeExpected]: new EstimatedTimeExpectedTable(),\r\n  [Tables.EstTimeWorst]: new EstimatedTimeWorstCaseTable(),\r\n  [Tables.LocalSettings]: new LocalSettingsTable(),\r\n} as const;\r\n\r\nclass LocalDatabase {\r\n  private tableListeners: Map<Tables, Set<ChangeCallback>> = new Map();\r\n  // Map from tables to rows to callbacks.\r\n  private rowListeners: Map<Tables, Map<any, Set<ChangeCallback>>> = new Map();\r\n  // Map from tables to rows to column to callbacks. \r\n  private cellListeners: Map<Tables, Map<any, Map<any, Set<ChangeCallback>>>> = new Map();\r\n  // Map from tables to columns to callbacks.\r\n  private columnListeners: Map<Tables, Map<any, Set<ChangeCallback>>> = new Map();\r\n  // Map from tables to columns to indices (column values) to callbacks.\r\n  private indexListeners: Map<Tables, Map<any, Map<any, Set<ChangeCallback>>>> = new Map();\r\n\r\n  public async loadInitialData() {\r\n    for (const key in DatabaseTables) {\r\n      DatabaseTables[key as keyof typeof DatabaseTables].onLoad();\r\n    }\r\n  }\r\n\r\n  public logTableData() {\r\n    console.log(DatabaseTables);\r\n  }\r\n\r\n  //#region Data Access\r\n\r\n  public getTableColumnCount(table: Tables) {\r\n    return DatabaseTables[table].columnCount;\r\n  }\r\n\r\n  public getCell<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C): ColumnType<T, C> {\r\n    return (DatabaseTables[table] as unknown as JobTable).getData(key as KeyType<Tables.Jobs>, column) as unknown as ColumnType<T, C>;\r\n  }\r\n\r\n  public getIndex<T extends Tables, C extends ColumnDef<T>>(tableType: T, column: C, value: ColumnType<T, C>): KeyType<T>[] {\r\n    const table = DatabaseTables[tableType] as JobTable;\r\n    return table.getRowsWithIndex(column, value) as KeyType<T>[];\r\n  }\r\n\r\n  public setCell<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C, value: ColumnType<T, C>) {\r\n    const previousValue = this.getCell(table, key, column);\r\n    if (previousValue === value) {\r\n      return;\r\n    }\r\n    this._setCell(table, key, column, value, previousValue);\r\n  }\r\n\r\n  private _setCell<T extends Tables, C extends ColumnDef<T>>(tableName: T, key: KeyType<T>, column: C, value: ColumnType<T, C>, previousValue: ColumnType<T, C>) {\r\n    const table = DatabaseTables[tableName] as unknown as JobTable;\r\n    table.setData(key as KeyType<Tables.Jobs>, column, value);\r\n    this._updateChangeTracking(tableName, key, column, value, ChangeType.Update);\r\n    this._triggerIndexChange(tableName, key, column, value, previousValue);\r\n  }\r\n\r\n  private _updateChangeTracking<T extends Tables, C extends ColumnDef<T>>(tableName: T, key: KeyType<T>, column: C, value: ColumnType<T, C>, changeType: ChangeType) {\r\n    const table = DatabaseTables[tableName] as unknown as JobTable;\r\n    if (!table.trackingTables.has(column)) {\r\n      return;\r\n    }\r\n    if (table.trackingTables.has(column)) {\r\n      const trackingTable = table.trackingTables.get(column)!;\r\n      const trackingTableRow = this.generateDefaultRow(trackingTable);\r\n      trackingTableRow[TrackingTableColumn.LOG_TIME] = new Date();\r\n      trackingTableRow[TrackingTableColumn.ENTRY_ID] = key as string; // hack\r\n      trackingTableRow[TrackingTableColumn.ENTRY_TYPE] = changeType;\r\n      trackingTableRow[TrackingTableColumn.ENTRY_VALUE] = value;\r\n\r\n      this.createRow(trackingTable, trackingTableRow)\r\n    }\r\n  }\r\n\r\n  private _triggerIndexChange<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C, value: ColumnType<T, C>, previousValue: ColumnType<T, C>) {\r\n    // TODO: Do we want to change the order?\r\n    this.triggerCallbackSet(this.tableListeners.get(table));\r\n    this.triggerCallbackSet(this.rowListeners.get(table)?.get(key));\r\n    this.triggerCallbackSet(this.cellListeners.get(table)?.get(key)?.get(column));\r\n    this.triggerCallbackSet(this.columnListeners.get(table)?.get(column));\r\n    // Need to trigger index change for both old and new value.\r\n    this.triggerCallbackSet(this.indexListeners.get(table)?.get(column)?.get(previousValue));\r\n    this.triggerCallbackSet(this.indexListeners.get(table)?.get(column)?.get(value));\r\n  }\r\n\r\n  private triggerCallbackSet(callbackSet?: Set<ChangeCallback>) {\r\n    if (!callbackSet) {\r\n      return;\r\n    }\r\n    for (const callback of callbackSet) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  public generateDefaultRow<T extends Tables>(table: T): OptionalTuple<ColumnTypes<T>> {\r\n    return Array(Database.getTableColumnCount(table)).fill(undefined) as unknown as OptionalTuple<ColumnTypes<T>>;\r\n  }\r\n\r\n  public createRow<T extends Tables>(table: T, initialValues?: OptionalTuple<ColumnTypes<T>>) {\r\n    const rowId = DatabaseTables[table].createRow(initialValues as any) as KeyType<T>;\r\n    \r\n    for (const [column] of DatabaseTables[table].trackingTables as ReadonlyMap<ColumnDef<T>, TrackedTables>) {\r\n      this._updateChangeTracking(table, rowId, column, this.getCell(table, rowId, column as unknown as ColumnDef<T>), ChangeType.Create);\r\n    }\r\n\r\n    this.triggerCallbackSet(this.tableListeners.get(table));\r\n    if (this.columnListeners.has(table)) {\r\n      for (const column of this.columnListeners.get(table)!) {\r\n        this.triggerCallbackSet(this.columnListeners.get(table)!.get(column));\r\n      }\r\n    }\r\n    if (this.indexListeners.has(table)) {\r\n      for (const [_, columnListeners] of this.indexListeners.get(table)!) {\r\n        for (const [_, valueListeners] of columnListeners) {\r\n          this.triggerCallbackSet(valueListeners);\r\n        }\r\n      }\r\n    }\r\n    // Do not trigger row or cell because it does not exist until now.\r\n    return rowId;\r\n  }\r\n\r\n  //#endregion Data Access\r\n\r\n  //#region Listeners\r\n\r\n  public addTableListener(table: Tables, listener: ChangeCallback) {\r\n    if (!this.tableListeners.has(table)) {\r\n      this.tableListeners.set(table, new Set());\r\n    }\r\n    this.tableListeners.get(table)!.add(listener);\r\n  }\r\n\r\n  public removeTableListener(table: Tables, listener: ChangeCallback) {\r\n    if (!this.tableListeners.has(table)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table]);\r\n      return;\r\n    }\r\n    const tableListeners = this.tableListeners.get(table)!;\r\n    if (!tableListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table]);\r\n      return;\r\n    }\r\n    tableListeners.delete(listener);\r\n    if (tableListeners.size === 0) {\r\n      this.tableListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addRowListener<T extends Tables>(table: T, key: KeyType<T>, listener: ChangeCallback) {\r\n    if (!this.rowListeners.has(table)) {\r\n      this.rowListeners.set(table, new Map());\r\n    }\r\n    if (!this.rowListeners.get(table)!.has(key)) {\r\n      this.rowListeners.get(table)!.set(key, new Set());\r\n    }\r\n    this.rowListeners.get(table)!.get(key)!.add(listener);\r\n  }\r\n\r\n  public removeRowListener<T extends Tables>(table: T, key: KeyType<T>, listener: ChangeCallback) {\r\n    if (!this.rowListeners.has(table) || !this.rowListeners.get(table)!.has(key)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key);\r\n      return;\r\n    }\r\n    const tableListeners = this.rowListeners.get(table)!;\r\n    const rowListeners = tableListeners.get(key)!;\r\n    if (!rowListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key);\r\n      return;\r\n    }\r\n    rowListeners.delete(listener);\r\n    if (rowListeners.size === 0) {\r\n      tableListeners.delete(key);\r\n    }\r\n    if (tableListeners.size === 0) {\r\n      this.rowListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addCellListener<T extends Tables>(table: T, key: KeyType<T>, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.cellListeners.has(table)) {\r\n      this.cellListeners.set(table, new Map());\r\n    }\r\n    if (!this.cellListeners.get(table)!.has(key)) {\r\n      this.cellListeners.get(table)!.set(key, new Map());\r\n    }\r\n    if (!this.cellListeners.get(table)!.get(key)!.has(column)) {\r\n      this.cellListeners.get(table)!.get(key)!.set(column, new Set());\r\n    }\r\n    this.cellListeners.get(table)!.get(key)!.get(column)!.add(listener);\r\n  }\r\n\r\n  public removeCellListener<T extends Tables>(table: T, key: KeyType<T>, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.cellListeners.has(table) || !this.cellListeners.get(table)!.has(key) || !this.cellListeners.get(table)!.get(key)!.has(column)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key, column);\r\n      return;\r\n    }\r\n    const tableListener = this.cellListeners.get(table)!;\r\n    const rowListener = tableListener.get(key)!;\r\n    const cellListeners = rowListener.get(column)!;\r\n    if (!cellListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key, column);\r\n      return;\r\n    }\r\n    cellListeners.delete(listener);\r\n    if (cellListeners.size === 0) {\r\n      rowListener.delete(column);\r\n    }\r\n    if (rowListener.size === 0) {\r\n      tableListener.delete(key);\r\n    }\r\n    if (tableListener.size === 0) {\r\n      this.cellListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addColumnListener<T extends Tables>(table: T, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.columnListeners.has(table)) {\r\n      this.columnListeners.set(table, new Map());\r\n    }\r\n    if (!this.columnListeners.get(table)!.has(column)) {\r\n      this.columnListeners.get(table)!.set(column, new Set());\r\n    }\r\n    this.columnListeners.get(table)!.get(column)!.add(listener);\r\n  }\r\n\r\n  public removeColumnListener<T extends Tables>(table: T, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.columnListeners.has(table) || !this.columnListeners.get(table)!.has(column)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column);\r\n      return;\r\n    }\r\n    const tableListeners = this.columnListeners.get(table)!;\r\n    const columnListeners = tableListeners.get(column)!;\r\n    if (!columnListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column);\r\n      return;\r\n    }\r\n    columnListeners.delete(listener);\r\n    if (columnListeners.size === 0) {\r\n      tableListeners.delete(column);\r\n    }\r\n    if (tableListeners.size === 0) {\r\n      this.columnListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addIndexListener<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>, listener: ChangeCallback) {\r\n    if (!this.indexListeners.has(table)) {\r\n      this.indexListeners.set(table, new Map());\r\n    }\r\n    if (!this.indexListeners.get(table)!.has(column)) {\r\n      this.indexListeners.get(table)!.set(column, new Map());\r\n    }\r\n    if (!this.indexListeners.get(table)!.get(column)!.has(value)) {\r\n      this.indexListeners.get(table)!.get(column)!.set(value, new Set());\r\n    }\r\n    this.indexListeners.get(table)!.get(column)!.get(value)!.add(listener);\r\n  }\r\n\r\n  public removeIndexListener<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>, listener: ChangeCallback) {\r\n    if (!this.indexListeners.has(table) || !this.indexListeners.get(table)!.has(column) || !this.indexListeners.get(table)!.get(column)!.has(value)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column, value);\r\n      return;\r\n    }\r\n    const tableListener = this.indexListeners.get(table)!;\r\n    const columnListener = tableListener.get(column)!;\r\n    const indexListeners = columnListener.get(value)!;\r\n    if (!indexListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column, value);\r\n      return;\r\n    }\r\n    indexListeners.delete(listener);\r\n    if (indexListeners.size === 0) {\r\n      columnListener.delete(value);\r\n    }\r\n    if (columnListener.size === 0) {\r\n      tableListener.delete(column);\r\n    }\r\n    if (tableListener.size === 0) {\r\n      this.indexListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  //#endregion Listeners\r\n}\r\n\r\ntype TableType<T extends Tables> = (typeof DatabaseTables)[T];\r\nexport type KeyType<T extends Tables> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? KeyType : never;\r\nexport type ColumnDef<T extends Tables> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? CDef : never;\r\nexport type ColumnTypes<T extends Tables> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? CType : never;\r\nexport type ColumnType<T extends Tables, C extends ColumnDef<T>> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? CType[C] : never;\r\n\r\ntype ChangeCallback = () => void;\r\n\r\nconst Database = new LocalDatabase();\r\nDatabase.loadInitialData();\r\n\r\nexport default Database;\r\n\r\nconsole.log(Database);\r\nconsole.log(DatabaseTables);","import { useState, useCallback, useEffect, useMemo, useRef, RefObject, MutableRefObject } from \"react\";\r\nimport Database, { Tables, ColumnDef, ColumnType, KeyType, ColumnTypes } from \"../database/LocalDatabase\";\r\nimport { OptionalTuple } from \"../utility/Types\";\r\n\r\nconst DatabaseOps = {\r\n  useCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C) {\r\n    const [value, setValue] = useState(Database.getCell(table, key, column));\r\n\r\n    const onDatabaseChange = useCallback(() => {\r\n      setValue(Database.getCell(table, key, column));\r\n    }, [table, key, column]); // Only the key should be necessary, but let's be safe.\r\n\r\n    useEffect(() => {\r\n      Database.addCellListener(table, key, column, onDatabaseChange);\r\n\r\n      return () => {\r\n        Database.removeCellListener(table, key, column, onDatabaseChange);\r\n      }\r\n    }, [table, key, column, onDatabaseChange]);\r\n\r\n    const setDatabaseValue = useCallback((newValue: ColumnType<T, C>) => {\r\n      Database.setCell(table, key, column, newValue);\r\n    }, [table, key, column]);\r\n    return [value, setDatabaseValue] as const;\r\n  },\r\n\r\n  useReadonlyCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C) {\r\n    const [state] = DatabaseOps.useCellState(table, key, column);\r\n    return [state];\r\n  },\r\n\r\n  useIndexState<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>): [KeyType<T>[]] {\r\n    const getIndex = useCallback(() => {\r\n      return Database.getIndex(table, column, value)\r\n    }, [table, column, value]);\r\n    const initialValue = useRef<KeyType<T>[]>(null) as MutableRefObject<KeyType<T>[]>;\r\n    if (initialValue.current === null) {\r\n      initialValue.current = getIndex();\r\n    }\r\n    const [indices, setIndices] = useState(initialValue.current);\r\n\r\n    const onDatabaseChange = useCallback(() => {\r\n      const newValues = getIndex();\r\n      setIndices(newValues);\r\n    }, [indices, setIndices, getIndex]);\r\n\r\n    useEffect(() => {\r\n      // Note: Can't attach to the cells in indices because another row might be set to value. \r\n      Database.addIndexListener(table, column, value, onDatabaseChange);\r\n\r\n      return () => {\r\n        Database.removeIndexListener(table, column, value, onDatabaseChange);\r\n      }\r\n    }, [table, column, value, onDatabaseChange])\r\n\r\n    // Users can't change composite data, so don't return a setter.\r\n    return [indices];\r\n  },\r\n\r\n  useRelatedIndexState<T extends Tables, CIdx extends ColumnDef<T>, CRel extends ColumnDef<T>>(table: T,\r\n    indexedColumn: CIdx, value: ColumnType<T, CIdx>, relatedColumn: CRel): [(readonly [KeyType<T>, ColumnType<T, CRel>])[]] {\r\n\r\n    const getRelatedValues = useCallback(() => {\r\n      const indices = DatabaseOps.getIndexState(table, indexedColumn, value);\r\n      return indices.map((key) => {\r\n        return [key, Database.getCell(table, key, relatedColumn)] as const;\r\n      })\r\n    }, [table, indexedColumn, value, relatedColumn]);\r\n    \r\n    const initialValue = useRef<(readonly [KeyType<T>, ColumnType<T, CRel>])[]>(null) as MutableRefObject<(readonly [KeyType<T>, ColumnType<T, CRel>])[]>;\r\n    if (initialValue.current === null) {\r\n      initialValue.current = getRelatedValues();\r\n    }\r\n    const [relatedValues, setRelatedValues] = useState(initialValue.current);\r\n\r\n    const onDatabaseChange = useCallback(() => {\r\n      setRelatedValues(getRelatedValues());\r\n    }, [getRelatedValues, setRelatedValues]);\r\n\r\n    useEffect(() => {\r\n      Database.addIndexListener(table, value, indexedColumn, onDatabaseChange);\r\n      for (const [key] of relatedValues) {\r\n        Database.addCellListener(table, key, relatedColumn, onDatabaseChange);\r\n      }\r\n\r\n      return () => {\r\n        Database.removeIndexListener(table, value, indexedColumn, onDatabaseChange);\r\n        for (const [key] of relatedValues) {\r\n          Database.removeCellListener(table, key, relatedColumn, onDatabaseChange);\r\n        }\r\n      }\r\n    }, [relatedValues, table, indexedColumn, value, relatedColumn, onDatabaseChange]);\r\n\r\n    return [relatedValues];\r\n  },\r\n\r\n  createRow<T extends Tables>(table: T, initialValues?: OptionalTuple<ColumnTypes<T>>) {\r\n    return Database.createRow(table, initialValues);\r\n  },\r\n\r\n  generateDefaultRow<T extends Tables>(table: T): OptionalTuple<ColumnTypes<T>> {\r\n    return Database.generateDefaultRow(table);\r\n  },\r\n\r\n  getCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C) {\r\n    return Database.getCell(table, key, column);\r\n  },\r\n  \r\n  setCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C, value: ColumnType<T, C>) {\r\n    Database.setCell(table, key, column, value);\r\n  },\r\n\r\n  getIndexState<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>) {\r\n    return Database.getIndex(table, column, value);\r\n  }\r\n}\r\n\r\nexport default DatabaseOps;","import { LocalSettingType } from \"../data/LocalSettingType\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { LocalSettingsColumns } from \"../database/tables/LocalSettingsTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst LocalSettingOps = {\r\n  useJobWithPopupOpen(): readonly [string | undefined] {\r\n    const [jobWithPopupOpen] = DatabaseOps.useCellState(Tables.LocalSettings,\r\n      LocalSettingType.JOB_WITH_POPUP_OPEN, LocalSettingsColumns.VALUE);\r\n    return [jobWithPopupOpen] as const;\r\n  },\r\n\r\n  requestOpenPopup(jobId: string) {\r\n    DatabaseOps.setCellState(Tables.LocalSettings, LocalSettingType.JOB_WITH_POPUP_OPEN, LocalSettingsColumns.VALUE, jobId);\r\n  },\r\n\r\n  closePopup() {\r\n    DatabaseOps.setCellState(Tables.LocalSettings, LocalSettingType.JOB_WITH_POPUP_OPEN, LocalSettingsColumns.VALUE, undefined);\r\n  },\r\n}\r\n\r\nexport default LocalSettingOps;","import { CompletionStatus, CompletionStatusType, getCompletionStatusKey } from \"../data/CompletionStatus\";\r\nimport { JobType } from \"../data/JobType\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { JobColumn } from \"../database/tables/JobTable\";\r\nimport { StatusTableColumns } from \"../database/tables/StatusTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\nimport LocalSettingOps from \"./LocalSettingOps\";\r\n\r\nconst JobOps = {\r\n  useName(jobId: string) {\r\n    return DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.NAME);\r\n  },\r\n\r\n  useDescription(jobId: string) {\r\n    return DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.DESCRIPTION);\r\n  },\r\n\r\n  useJobType(jobId: string) {\r\n    return DatabaseOps.useReadonlyCellState(Tables.Jobs, jobId, JobColumn.JOB_TYPE);\r\n  },\r\n\r\n  useDueDate(jobId: string) {\r\n    return DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.DUE_DATE);\r\n  },\r\n\r\n  useTimeSpent(jobId: string) {\r\n    return DatabaseOps.useReadonlyCellState(Tables.Jobs, jobId, JobColumn.MINUTES_SPENT);\r\n  },\r\n\r\n  useChildTasks(projectId: string) {\r\n    const [childTasks] = DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_TASK_OF, projectId);\r\n    return [childTasks];\r\n  },\r\n\r\n  useRootTasks() {\r\n    return DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_TASK_OF, \"\");\r\n  },\r\n\r\n  useChildProjects(projectId: string) {\r\n    // TODO - Pass in filtering/sorting settings.\r\n    return DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_PROJECT_OF, projectId);\r\n  },\r\n\r\n  useRootProjects() {\r\n    // TODO: pass in filtering/sorting settings.\r\n    return DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_PROJECT_OF, \"\");\r\n  },\r\n\r\n  createRootProject() {\r\n    return JobOps.createChildProject(\"\");\r\n  },\r\n\r\n  createRootTask() {\r\n    return JobOps.createChildTask(\"\");\r\n  },\r\n\r\n  createChildProject(projectId?: string) {\r\n    // TODO: Use a Record instead of Tuple so we can specify arbitrary parameters.\r\n    const defaultValues = DatabaseOps.generateDefaultRow(Tables.Jobs);\r\n    defaultValues[JobColumn.JOB_TYPE] = JobType.Project;\r\n    defaultValues[JobColumn.CHILD_PROJECT_OF] = projectId;\r\n    const jobId = DatabaseOps.createRow(Tables.Jobs, defaultValues);\r\n\r\n    // Also set a completion status by default.\r\n    const completionStatusValue = DatabaseOps.generateDefaultRow(Tables.Status);\r\n    completionStatusValue[StatusTableColumns.JOB_ID] = jobId;\r\n    completionStatusValue[StatusTableColumns.STATUS_TYPE] = CompletionStatusType;\r\n    completionStatusValue[StatusTableColumns.STATUS_VALUE] = getCompletionStatusKey(CompletionStatus.Planned);\r\n    DatabaseOps.createRow(Tables.Status, completionStatusValue);\r\n\r\n    LocalSettingOps.requestOpenPopup(jobId);\r\n\r\n    return jobId;\r\n  },\r\n\r\n  createChildTask(projectId?: string) {\r\n    const defaultValues = DatabaseOps.generateDefaultRow(Tables.Jobs);\r\n    defaultValues[JobColumn.JOB_TYPE] = JobType.Task;\r\n    defaultValues[JobColumn.CHILD_TASK_OF] = projectId;\r\n    const jobId = DatabaseOps.createRow(Tables.Jobs, defaultValues);\r\n\r\n    // Also set a completion status by default.\r\n    const completionStatusValue = DatabaseOps.generateDefaultRow(Tables.Status);\r\n    completionStatusValue[StatusTableColumns.JOB_ID] = jobId;\r\n    completionStatusValue[StatusTableColumns.STATUS_TYPE] = CompletionStatusType;\r\n    completionStatusValue[StatusTableColumns.STATUS_VALUE] = getCompletionStatusKey(CompletionStatus.Planned);\r\n    DatabaseOps.createRow(Tables.Status, completionStatusValue);\r\n\r\n    LocalSettingOps.requestOpenPopup(jobId);\r\n\r\n    return jobId;\r\n  },\r\n}\r\n\r\nexport default JobOps;","import LocalDatabase, { Tables } from \"../database/LocalDatabase\";\r\nimport { StatusDefinitionColumn } from \"../database/tables/StatusDefinitionTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst StatusDefinitionOps = {\r\n  useStatusName(statusType: string, key: string) {\r\n    const type = LocalDatabase.getCell(Tables.StatusDefinitions, key, StatusDefinitionColumn.TYPE);\r\n    console.assert(type !== undefined, \"No status definition with key \", key, \" exists\");\r\n    console.assert(type === statusType, \"The status definition key \", key, \" does not belong to type\", statusType);\r\n    return DatabaseOps.useCellState(Tables.StatusDefinitions, key, StatusDefinitionColumn.NAME);\r\n  },\r\n\r\n  /**\r\n   * Returns a list of all possible values for a particular status.\r\n   * @param statusType The type of status to retrieve\r\n   * @returns List of all status values\r\n   */\r\n  useAllStatusValuesAndNames(statusType: string) {\r\n    return DatabaseOps.useRelatedIndexState(Tables.StatusDefinitions, StatusDefinitionColumn.TYPE, statusType, StatusDefinitionColumn.NAME);\r\n  },\r\n}\r\n\r\nexport default StatusDefinitionOps;","import { useMemo } from \"react\";\r\nimport { CompletionStatusType } from \"../data/CompletionStatus\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { StatusTableColumns } from \"../database/tables/StatusTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst StatusOps = {\r\n  useCompletionStatus(jobId: string) {\r\n    // TODO: Remove once we implement dual-indices\r\n    const completionStatusId = useMemo(() => {\r\n      const statusIdsForJob = DatabaseOps.getIndexState(Tables.Status, StatusTableColumns.JOB_ID, jobId);\r\n      for (const statusId of statusIdsForJob) {\r\n        const statusType = DatabaseOps.getCellState(Tables.Status, statusId, StatusTableColumns.STATUS_TYPE);\r\n        if (statusType === CompletionStatusType) {\r\n          return statusId;\r\n        }\r\n      }\r\n      // This shouldn't happen because we always create a completion status entry when creating a new job.\r\n      console.warn(\"No completion status for job\", jobId);\r\n      return \"\";\r\n    }, [jobId]);\r\n    return DatabaseOps.useCellState(Tables.Status, completionStatusId, StatusTableColumns.STATUS_VALUE);\r\n  }\r\n}\r\n\r\nexport default StatusOps;","import { useCallback } from \"react\";\r\nimport { CompletionStatus, CompletionStatusType, getCompletionStatusKey, getCompletionStatusName } from \"../../data/CompletionStatus\";\r\nimport StatusDefinitionOps from \"../../operations/StatusDefinitionOps\";\r\nimport StatusOps from \"../../operations/StatusOps\";\r\nimport \"./CompletionStatusField.css\";\r\n\r\ninterface ICompletionStatusFieldProps {\r\n  id: string,\r\n}\r\n\r\nconst CompletionStatusField = ({ id }: ICompletionStatusFieldProps) => {\r\n  const [completionStatus, setCompletionStatus] = StatusOps.useCompletionStatus(id);\r\n  const [statusValuesAndNames] = StatusDefinitionOps.useAllStatusValuesAndNames(CompletionStatusType);\r\n\r\n  const setCheckboxStatus: React.ChangeEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    setCompletionStatus(getCompletionStatusKey(e.currentTarget.checked ? CompletionStatus.Completed : CompletionStatus.InProgress));\r\n  }, [setCompletionStatus]);\r\n\r\n  const setSelectStatus: React.ChangeEventHandler<HTMLSelectElement> = useCallback((e) => {\r\n    setCompletionStatus(e.currentTarget.value);\r\n  }, [setCompletionStatus]);\r\n\r\n  return <div className=\"completion-status-field\">\r\n    <input type=\"checkbox\" checked={completionStatus === getCompletionStatusKey(CompletionStatus.Completed)}\r\n      onChange={ setCheckboxStatus } />\r\n    <select onChange={setSelectStatus} value={completionStatus}>\r\n      {\r\n        statusValuesAndNames.map(([value, name], index) => <option value={value} key={index}>\r\n          {name}\r\n        </option>)\r\n      }\r\n    </select>\r\n  </div>\r\n};\r\n\r\nexport default CompletionStatusField;","import { useCallback } from \"react\";\r\nimport { Tables } from \"../../database/LocalDatabase\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport \"./CompletionStatusField.css\";\r\n\r\ninterface IDueDateFieldProps {\r\n  id: string,\r\n}\r\n\r\nconst DueDateField = ({ id }: IDueDateFieldProps) => {\r\n  const [dueDate, setDueDate] = JobOps.useDueDate(id);\r\n\r\n  const onChangeDueDate: React.ChangeEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    console.log(e.currentTarget.valueAsDate);\r\n    setDueDate(e.currentTarget.valueAsDate!);\r\n  }, [setDueDate]);\r\n\r\n  return <div className=\"completion-status-field\">\r\n    <input type=\"date\" value={dueDate.toISOString().substr(0, 10)} onChange={onChangeDueDate} />\r\n  </div>\r\n};\r\n\r\nexport default DueDateField;","import { useCallback } from \"react\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { JobColumn } from \"../database/tables/JobTable\";\r\nimport { TimeLogColumns } from \"../database/tables/TimeLogTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst TimeLogOps = {\r\n  useLoggedTime(jobId: string) {\r\n    const [currentTime] = DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.MINUTES_SPENT);\r\n\r\n    const logTime = (duration: number) => {\r\n      TimeLogOps.createTimeLogEntry(jobId, duration);\r\n    }\r\n\r\n    return [currentTime, logTime] as const;\r\n  },\r\n\r\n  useEntryIdsForJob(jobId: string) {\r\n    return DatabaseOps.useIndexState(Tables.TimeLog, TimeLogColumns.JOB_ID, jobId);\r\n  },\r\n\r\n  useEntryValues(jobId: string) {\r\n    return DatabaseOps.useRelatedIndexState(Tables.TimeLog, TimeLogColumns.JOB_ID, jobId, TimeLogColumns.VALUE);\r\n  },\r\n\r\n  useDescription(logId: string) {\r\n    return DatabaseOps.useCellState(Tables.TimeLog, logId, TimeLogColumns.DESCRIPTION);\r\n  },\r\n\r\n  useTimeValue(logId: string) {\r\n    // TODO: Need to update the job time value as well.\r\n    const [timeValue, setTimeValue] = DatabaseOps.useCellState(Tables.TimeLog, logId, TimeLogColumns.VALUE);\r\n\r\n    const updateTimeValue = useCallback((newValue: number) => {\r\n      setTimeValue(newValue);\r\n      // Need to update the time spent for all affected tasks and projects.\r\n      const taskId = DatabaseOps.getCellState(Tables.TimeLog, logId, TimeLogColumns.JOB_ID);\r\n      TimeLogOps.updateTimeSpentForJobs(taskId, newValue, timeValue);\r\n    }, [logId, timeValue, setTimeValue]);\r\n\r\n    return [timeValue, updateTimeValue] as const;\r\n  },\r\n\r\n  createTimeLogEntry(taskId: string, duration: number, description: string = \"\") {\r\n    TimeLogOps.updateTimeSpentForJobs(taskId, duration, 0);\r\n\r\n    const entryRow = DatabaseOps.generateDefaultRow(Tables.TimeLog);\r\n    entryRow[TimeLogColumns.JOB_ID] = taskId;\r\n    entryRow[TimeLogColumns.VALUE] = duration;\r\n    entryRow[TimeLogColumns.DESCRIPTION] = description;\r\n    DatabaseOps.createRow(Tables.TimeLog, entryRow);\r\n  },\r\n\r\n  updateTimeSpentForJobs(taskId: string, newDuration: number, previousDuration: number) {\r\n    const diff = newDuration - previousDuration;\r\n\r\n    const currentTime = DatabaseOps.getCellState(Tables.Jobs, taskId, JobColumn.MINUTES_SPENT);\r\n    DatabaseOps.setCellState(Tables.Jobs, taskId, JobColumn.MINUTES_SPENT, currentTime + diff);\r\n\r\n    let projectAncestorId = DatabaseOps.getCellState(Tables.Jobs, taskId, JobColumn.CHILD_TASK_OF);\r\n    while (projectAncestorId !== undefined) {\r\n      const currentTime = DatabaseOps.getCellState(Tables.Jobs, projectAncestorId, JobColumn.MINUTES_SPENT);\r\n      DatabaseOps.setCellState(Tables.Jobs, projectAncestorId, JobColumn.MINUTES_SPENT, currentTime + diff);\r\n      projectAncestorId = DatabaseOps.getCellState(Tables.Jobs, projectAncestorId, JobColumn.CHILD_PROJECT_OF);\r\n    }\r\n  }\r\n}\r\n\r\nexport default TimeLogOps;","import { forwardRef, useCallback } from \"react\";\r\nimport \"./DurationField.css\";\r\n\r\ninterface IDurationFieldParams {\r\n  time: number,\r\n  setTime?: (newTime: number) => void,\r\n  readonly: boolean,\r\n  className?: string,\r\n  ref?: React.MutableRefObject<HTMLInputElement | null>,\r\n}\r\n\r\nconst DurationField = forwardRef(({\r\n  time, setTime, readonly, className\r\n}: IDurationFieldParams, ref: React.ForwardedRef<HTMLInputElement | null>) => {\r\n  const minutes = time % 60;\r\n  const hours = (time - minutes) / 60;\r\n\r\n  const setInputHours: React.FormEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    if (setTime) {\r\n      setTime(60 * e.currentTarget.valueAsNumber + minutes);\r\n    }\r\n  }, [setTime, minutes]);\r\n\r\n  const setInputMinutes: React.FormEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    if (setTime) {\r\n      setTime(60 * hours + e.currentTarget.valueAsNumber);\r\n    }\r\n  }, [setTime, hours]);\r\n\r\n  return <div className={`${className}`}>\r\n    <input className=\"duration-field-input\" type=\"number\" min={0} max={23} step={1} value={hours} onChange={setInputHours} readOnly={readonly} ref={ref}/>Hr\r\n    <input className=\"duration-field-input\" type=\"number\" min={0} max={59} step={5} value={minutes} onChange={setInputMinutes} readOnly={readonly} />Min\r\n  </div>\r\n})\r\n\r\nexport default DurationField;","import { useCallback, useMemo } from \"react\";\r\nimport \"./TextInputField.css\";\r\n\r\ninterface ITextInputField {\r\n  multiRow?: boolean,\r\n  className?: string,\r\n  editMode: boolean,\r\n  setEditMode?: (editMode: boolean) => void,\r\n  setEditModeOnFocus?: boolean,\r\n  value: string,\r\n  setValue?: (newValue: string) => void,\r\n  onFocus?: () => void,\r\n  onBlur?: () => void,\r\n  minRows?: number,\r\n  maxRows?: number,\r\n}\r\n\r\nconst TextInputField = (params: ITextInputField) => {\r\n  const onChange: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = useCallback((e) => {\r\n    if (params.setValue) {\r\n      params.setValue(e.currentTarget.value);\r\n    }\r\n  }, [params.setValue]);\r\n\r\n  let rows = useMemo(() => (params.value.match(/\\n/g) || []).length + 1, [params.value]);\r\n  if (params.minRows !== undefined && rows < params.minRows) {\r\n    rows = params.minRows;\r\n  }\r\n  if (params.maxRows !== undefined && rows > params.maxRows) {\r\n    rows = params.maxRows;\r\n  }\r\n\r\n  const defaultOnFocus = useCallback(() => {\r\n    if (params.setEditMode !== undefined) {\r\n      params.setEditMode(true);\r\n    }\r\n  }, [params.setEditMode]);\r\n\r\n  const defaultOnBlur = useCallback(() => {\r\n    if (params.setEditMode !== undefined) {\r\n      params.setEditMode(false);\r\n    }\r\n  }, [params.setEditMode]);\r\n\r\n  if (params.multiRow) {\r\n    return <textarea\r\n      value={params.value}\r\n      onChange={onChange}\r\n      readOnly={!params.editMode}\r\n      className={`${params.className || \"\"} ${!params.editMode ? \"text-input-field-readonly\" : \"\"}`}\r\n      onFocus={params.onFocus && !params.setEditModeOnFocus ? params.onFocus : defaultOnFocus}\r\n      onBlur={params.onBlur && !params.setEditModeOnFocus ? params.onBlur : defaultOnBlur}\r\n      rows={rows}\r\n    />\r\n  } else {\r\n    return <input\r\n      value={params.value}\r\n      onChange={onChange}\r\n      readOnly={!params.editMode}\r\n      className={`${params.className || \"\"} ${!params.editMode ? \"text-input-field-readonly\" : \"\"}`}\r\n      onFocus={params.onFocus && !params.setEditModeOnFocus ? params.onFocus : defaultOnFocus}\r\n      onBlur={params.onBlur && !params.setEditModeOnFocus ? params.onBlur : defaultOnBlur}\r\n    />\r\n  }\r\n}\r\n\r\nexport default TextInputField;","import { useCallback, useEffect, useRef } from \"react\"\r\nimport DurationField from \"./DurationField\"\r\nimport TextInputField from \"./TextInputField\"\r\nimport \"./TimeLogField.css\"\r\n\r\ninterface ITimeLogFieldParams {\r\n  duration: number,\r\n  setDuration?: (newDuration: number) => void,\r\n  description: string,\r\n  setDescription?: (newDescription: string) => void,\r\n  editMode: boolean,\r\n  allowToggleEditMode?: boolean,\r\n  onSetEditable?: () => void,\r\n  onSubmit?: () => void,\r\n  onSetReadonly?: () => void,\r\n  allowDelete?: boolean,\r\n  onDelete?: () => void,\r\n  className?: string\r\n}\r\n\r\nconst TimeLogField = ({\r\n  duration, setDuration, description, setDescription, editMode, allowToggleEditMode, onSetEditable, onSubmit, onSetReadonly, allowDelete, onDelete,\r\n  className,\r\n}: ITimeLogFieldParams) => {\r\n\r\n  const durationRef: React.MutableRefObject<HTMLInputElement | null> = useRef(null);\r\n  const editButtonRef: React.MutableRefObject<HTMLButtonElement | null> = useRef(null);\r\n\r\n  const onSave = useCallback(() => {\r\n    if (onSubmit !== undefined) {\r\n      onSubmit();\r\n    }\r\n    if (allowToggleEditMode && onSetReadonly !== undefined) {\r\n      onSetReadonly();\r\n    }\r\n    editButtonRef.current?.focus();\r\n  }, [onSubmit, allowToggleEditMode, onSetReadonly]);\r\n\r\n  const onClickEditButton = useCallback(() => {\r\n    if (allowToggleEditMode && onSetEditable) {\r\n      onSetEditable();\r\n    }\r\n    durationRef.current?.focus();\r\n    durationRef.current?.select();\r\n  }, [allowToggleEditMode, onSetEditable, durationRef]);\r\n\r\n  const onClickCancelButton = useCallback(() => {\r\n    if (onSetReadonly) {\r\n      onSetReadonly();\r\n    }\r\n    editButtonRef.current?.focus();\r\n  }, [onSetReadonly])\r\n\r\n  useEffect(() => {\r\n    if (editMode) {\r\n      durationRef.current?.focus();\r\n      durationRef.current?.select();\r\n    }\r\n  }, [editMode]);\r\n\r\n  return <div className={`${className || \"\"} time-log-field`}>\r\n    <div className=\"time-log-field-upper\">\r\n      <DurationField time={duration} setTime={setDuration} readonly={!editMode} className=\"time-log-field-duration\" ref={durationRef} />\r\n      <TextInputField\r\n        editMode={editMode}\r\n        value={description}\r\n        setValue={setDescription}\r\n        multiRow={false}\r\n        className=\"time-log-field-description\"\r\n      />\r\n    </div>\r\n    <div className=\"time-log-field-lower\">\r\n      <button onClick={onClickEditButton} hidden={editMode || !allowToggleEditMode} className=\"time-log-field-button\" ref={editButtonRef}>Edit</button>\r\n      <button onClick={onSave} hidden={!editMode} className=\"time-log-field-button\">Save</button>\r\n      <button onClick={onClickCancelButton} hidden={!editMode || !allowToggleEditMode} className=\"time-log-field-button\">Cancel</button>\r\n      <button onClick={onDelete} hidden={!allowDelete || editMode} className=\"time-log-field-button\">Delete</button>\r\n    </div>\r\n  </div>\r\n};\r\n\r\nexport default TimeLogField;\r\n","import { useCallback, useState } from \"react\";\r\nimport TimeLogOps from \"../../../operations/TimeLogOps\";\r\nimport TimeLogField from \"../../fields/TimeLogField\";\r\nimport \"./TimeLogEntryNew.css\";\r\n\r\ninterface ITimeLogEntryNew {\r\n  taskId: string,\r\n  onLog?: () => void;\r\n  className?: string,\r\n  onCancel?: () => void;\r\n}\r\n\r\nconst TimeLogEntryNew = ({ taskId, onLog, className, onCancel }: ITimeLogEntryNew) => {\r\n  const [time, setTime] = useState(15);\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const logInputTime = useCallback(() => {\r\n    TimeLogOps.createTimeLogEntry(taskId, time, description);\r\n    if (onLog) {\r\n      onLog();\r\n    }\r\n  }, [taskId, time, description, onLog]);\r\n\r\n  return <TimeLogField\r\n    description={description} setDescription={setDescription}\r\n    duration={time} setDuration={setTime}\r\n    editMode={true}\r\n    onSubmit={logInputTime}\r\n    onSetReadonly={onCancel}\r\n    className={`time-log-entry-new ${className}`}\r\n    allowToggleEditMode\r\n  />;\r\n}\r\n\r\nexport default TimeLogEntryNew;","import React, { useCallback, useState } from \"react\";\r\n\r\n// Note to self: When creating a new hook, make sure to update package.json as well.\r\n\r\nexport function useToggleState(initialValue: boolean) {\r\n  const [state, setState] = useState(initialValue);\r\n  const toggleState = useCallback(() => {\r\n    setState(!state);\r\n  }, [state, setState]);\r\n  const enableState = useCallback(() => {\r\n    setState(true);\r\n  }, [setState]);\r\n  const disableState = useCallback(() => {\r\n    setState(false);\r\n  }, [setState])\r\n  return [state, enableState, disableState, toggleState] as const;\r\n}\r\n\r\nexport function useOnContainerBlur(onBlur: (() => void) | undefined, deps: React.DependencyList): React.FocusEventHandler {\r\n  return useCallback(onBlur ? (e) => {\r\n    if (e.relatedTarget === null || !e.currentTarget.contains(e.relatedTarget as Node)) {\r\n      onBlur();\r\n    }\r\n  } : () => { }, [...deps]);\r\n}\r\n\r\nexport function useSaveableState<T>(valueFromSave: T, setValueFromSave: (newValue: T) => void, allowExternalUpdates: boolean) {\r\n  const [savedValue, setSavedValue] = useState(valueFromSave);\r\n  if (savedValue !== valueFromSave) {\r\n    setSavedValue(valueFromSave);\r\n  }\r\n\r\n  const [localValue, setLocalValue] = useState(valueFromSave);\r\n  if (valueFromSave !== localValue && allowExternalUpdates) {\r\n    setLocalValue(valueFromSave);\r\n  }\r\n\r\n  const saveValue = useCallback((newValue: T) => {\r\n    setValueFromSave(newValue);\r\n  }, [setValueFromSave]);\r\n\r\n  return [localValue, setLocalValue, saveValue] as const;\r\n}","export function formatDuration(duration: number) {\r\n  return `${duration >= 60 ? `${Math.floor(duration / 60)}hr ` : \"\"}${duration % 60}min`\r\n}","import \"./PopupContainer.css\";\r\nimport ReactModal from \"react-modal\";\r\n\r\ninterface IPopupContainerParams {\r\n  isOpen: boolean,\r\n  onClose: () => void,\r\n  children: React.ReactNode,\r\n  className?: string,\r\n  showCloseButton?: boolean,\r\n  onRequestClose?: () => void,\r\n  closeOnEsc?: boolean,\r\n  closeOnOverlayClick?: boolean,\r\n}\r\n\r\nconst PopupContainer = ({ isOpen, onClose, children, className, showCloseButton, onRequestClose, closeOnEsc, closeOnOverlayClick }: IPopupContainerParams) => {\r\n  return <ReactModal\r\n    isOpen={isOpen}\r\n    className={`${className ? className : undefined} form-popup`}\r\n    appElement={document.body}\r\n    shouldCloseOnEsc={closeOnEsc}\r\n    shouldCloseOnOverlayClick={closeOnOverlayClick}\r\n    onRequestClose={onRequestClose}\r\n  >\r\n    {\r\n      showCloseButton ? <button onClick={onClose} className=\"form-popup-close\">Close</button> : undefined\r\n    }\r\n    {children}\r\n  </ReactModal>\r\n}\r\n\r\nexport default PopupContainer;","import { useCallback, useState } from \"react\";\r\nimport JobOps from \"../../../operations/JobOps\";\r\nimport CompletionStatusField from \"../../fields/CompletionStatusField\";\r\nimport DueDateField from \"../../fields/DueDateField\";\r\nimport TimeLogEntryNew from \"../timelog/TimeLogEntryNew\";\r\nimport \"./TaskLine.css\";\r\nimport \"./JobLine.css\";\r\nimport { useToggleState } from \"../../../operations/UtilityHooks\";\r\nimport { formatDuration } from \"../../../utility/StringUtility\";\r\nimport PopupContainer from \"../../popup/PopupContainer\";\r\nimport LocalSettingOps from \"../../../operations/LocalSettingOps\";\r\n\r\ninterface ITaskLineParams {\r\n  taskId: string,\r\n}\r\n\r\nconst TaskLine = ({ taskId }: ITaskLineParams) => {\r\n  const [name] = JobOps.useName(taskId);\r\n  const [description] = JobOps.useDescription(taskId);\r\n\r\n  const [timeSpent] = JobOps.useTimeSpent(taskId);\r\n\r\n  const [bodyVisible, setBodyVisible] = useState(true);\r\n  const toggleBodyVisible = useCallback(() => {\r\n    setBodyVisible(!bodyVisible);\r\n  }, [bodyVisible]);\r\n\r\n  const [isTimeLogWidgetOpen, showTimeLogWidget, closeTimeLogWidget] = useToggleState(false);\r\n\r\n  const requestOpenPopup = useCallback(() => {\r\n    LocalSettingOps.requestOpenPopup(taskId);\r\n  }, [taskId])\r\n\r\n  return <div className=\"task\">\r\n    <div className=\"task-header\">\r\n      <div className=\"task-header-left\" onClick={toggleBodyVisible}>\r\n        {\r\n          name === \"\" ? <p>(Unnamed Task)</p> : <p>{name}</p>\r\n        }\r\n      </div>\r\n      <div className=\"task-header-right\">\r\n        <CompletionStatusField id={taskId} />\r\n        <button className=\"job-button\" onClick={requestOpenPopup}>Edit</button>\r\n        <DueDateField id={taskId} />\r\n        <div>\r\n          <button onClick={isTimeLogWidgetOpen ? closeTimeLogWidget : showTimeLogWidget} className=\"time-log-widget-button job-button\">Log Time</button>\r\n          {\r\n            <PopupContainer isOpen={isTimeLogWidgetOpen} onClose={closeTimeLogWidget} onRequestClose={closeTimeLogWidget} closeOnEsc closeOnOverlayClick>\r\n              <div>\r\n                <TimeLogEntryNew taskId={taskId} onLog={closeTimeLogWidget} onCancel={closeTimeLogWidget} />\r\n              </div>\r\n            </PopupContainer>\r\n          }\r\n        </div>\r\n        <button className=\"job-button\">Est. Time</button>\r\n      </div>\r\n    </div>\r\n    <div className={`task-body ${bodyVisible ? \"\" : \"hidden\"}`}>\r\n      <div className=\"task-description\">\r\n        <p>{description === \"\" ? \"(No Description)\" : description}</p>\r\n      </div>\r\n      <p>Time Spent: {formatDuration(timeSpent)}</p>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default TaskLine;","import React, { useCallback, useState } from \"react\";\r\nimport TaskLine from \"./TaskLine\";\r\nimport \"./ProjectLine.css\"\r\nimport CompletionStatusField from \"../../fields/CompletionStatusField\";\r\nimport JobOps from \"../../../operations/JobOps\";\r\nimport JobPopup from \"./JobPopup\";\r\nimport \"./JobLine.css\";\r\nimport LocalSettingOps from \"../../../operations/LocalSettingOps\";\r\n\r\ninterface IProjectLineParams {\r\n  projectId: string,\r\n}\r\n\r\nconst ProjectLine = ({ projectId }: IProjectLineParams) => {\r\n  const [name] = JobOps.useName(projectId);\r\n  const [description] = JobOps.useDescription(projectId);\r\n  const [childTaskIds] = JobOps.useChildTasks(projectId);\r\n  const [childProjectIds] = JobOps.useChildProjects(projectId);\r\n\r\n  const [bodyVisible, setBodyVisible] = useState(true);\r\n  const toggleBodyVisible = useCallback(() => {\r\n    setBodyVisible(!bodyVisible);\r\n  }, [bodyVisible]);\r\n\r\n  const onCreateChildProject = useCallback(() => {\r\n    JobOps.createChildProject(projectId);\r\n    setBodyVisible(true);\r\n  }, [projectId, setBodyVisible]);\r\n\r\n  const onCreateChildTask = useCallback(() => {\r\n    JobOps.createChildTask(projectId);\r\n    setBodyVisible(true);\r\n  }, [projectId, setBodyVisible]);\r\n\r\n  const requestOpenPopup = useCallback(() => {\r\n    LocalSettingOps.requestOpenPopup(projectId);\r\n  }, [projectId]);\r\n\r\n  return <div className=\"project\">\r\n    <div className=\"project-header\">\r\n      <div className=\"project-header-left\">\r\n        <div className=\"project-namefield\" onClick={toggleBodyVisible}>\r\n          {\r\n            name === \"\" ? <p>(Unnamed Project)</p> : <p>{name}</p>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"project-header-right\">\r\n        <button className=\"job-button\" onClick={onCreateChildProject}>Add Project</button>\r\n        <button className=\"job-button\" onClick={onCreateChildTask}>Add Task</button>\r\n        <CompletionStatusField id={projectId}/>\r\n        <button className=\"job-button\" onClick={requestOpenPopup}>Edit</button>\r\n      </div>\r\n    </div>\r\n    <div className={`project-body ${bodyVisible ? \"\" : \"hidden\"}`}>\r\n      <div className=\"project-data\">\r\n        <div className=\"project-description\">\r\n          {\r\n            description === \"\" ? <p>(No Description)</p> : <p>{description}</p>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"project-tasks\">\r\n        {\r\n          childTaskIds.map((taskId, index) => {\r\n            return <React.Fragment key={index}>\r\n              <TaskLine taskId={taskId} />\r\n            </React.Fragment>\r\n          })\r\n        }\r\n      </div>\r\n      <div className=\"project-children\">\r\n        {\r\n          childProjectIds.map((projectId, index) => {\r\n            return <React.Fragment key={index}>\r\n              <ProjectLine projectId={projectId} />\r\n            </React.Fragment>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default ProjectLine;","import React, { useCallback, useRef, useState } from \"react\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport \"./DescriptionField.css\";\r\nimport TextInputField from \"./TextInputField\";\r\n\r\ninterface IDescriptionFieldParams {\r\n  id: string,\r\n}\r\n\r\nconst DescriptionField = ({\r\n  id\r\n}: IDescriptionFieldParams) => {\r\n  const [description, setDescription] = JobOps.useDescription(id);\r\n  const [editMode, setEditMode] = useState(false);\r\n  \r\n  return <TextInputField\r\n    multiRow\r\n    className=\"descriptionfield-input-field\"\r\n    editMode={editMode}\r\n    setEditMode={setEditMode}\r\n    setEditModeOnFocus\r\n    value={description}\r\n    minRows={5}\r\n    maxRows={20}\r\n    setValue={setDescription}\r\n  />\r\n};\r\n\r\nexport default DescriptionField;","import { useState } from \"react\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport \"./NameField.css\";\r\nimport TextInputField from \"./TextInputField\";\r\n\r\ninterface INameFieldParams {\r\n  id: string,\r\n}\r\n\r\nconst NameField = ({\r\n  id\r\n}: INameFieldParams) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [name, setName] = JobOps.useName(id);\r\n\r\n  return <TextInputField\r\n    className=\"namefield-input-field\"\r\n    editMode={editMode}\r\n    setValue={setName}\r\n    value={name}\r\n    setEditMode={setEditMode}\r\n    setEditModeOnFocus\r\n  />\r\n};\r\n\r\nexport default NameField;","import { useCallback } from \"react\";\r\nimport TimeLogOps from \"../../../operations/TimeLogOps\";\r\nimport { useSaveableState, useToggleState } from \"../../../operations/UtilityHooks\";\r\nimport TimeLogField from \"../../fields/TimeLogField\";\r\nimport \"./TimeLogEntry.css\";\r\n\r\ninterface ITimeLogEntryParams {\r\n  timeLogId: string,\r\n}\r\n\r\nconst TimeLogEntry = ({timeLogId}: ITimeLogEntryParams) => {  \r\n  const [editMode, setEditable, setReadonly] = useToggleState(false);\r\n\r\n  const [description, setLocalDescription, saveDescription] = useSaveableState(...TimeLogOps.useDescription(timeLogId), !editMode);\r\n  const [timeValue, setLocalTimeValue, saveTimeValue] = useSaveableState(...TimeLogOps.useTimeValue(timeLogId), !editMode);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    saveDescription(description);\r\n    saveTimeValue(timeValue);\r\n  }, [description, timeValue, saveDescription, saveTimeValue]);\r\n\r\n  return <TimeLogField\r\n    description={description} setDescription={setLocalDescription}\r\n    duration={timeValue} setDuration={setLocalTimeValue}\r\n    editMode={editMode} allowToggleEditMode\r\n    onSetEditable={setEditable}\r\n    onSetReadonly={setReadonly}\r\n    onSubmit={onSubmit}\r\n    allowDelete\r\n  />\r\n}\r\n\r\nexport default TimeLogEntry;","import { useState } from \"react\";\r\nimport { JobType } from \"../../../data/JobType\";\r\nimport JobOps from \"../../../operations/JobOps\";\r\nimport TimeLogOps from \"../../../operations/TimeLogOps\"\r\nimport { useToggleState } from \"../../../operations/UtilityHooks\";\r\nimport { formatDuration } from \"../../../utility/StringUtility\";\r\nimport TimeLogEntryNew from \"./TimeLogEntryNew\";\r\nimport TimeLogEntry from \"./TimeLogEntry\";\r\nimport \"./TimeLogList.css\";\r\n\r\ninterface ITimeLogListParams {\r\n  jobId: string,\r\n}\r\n\r\nconst TimeLogList = ({ jobId, }: ITimeLogListParams) => {\r\n  const [jobType] = JobOps.useJobType(jobId);\r\n\r\n  const [timeLogEntries] = TimeLogOps.useEntryIdsForJob(jobId);\r\n  const [timeSpent] = JobOps.useTimeSpent(jobId);\r\n\r\n  const [isNewEntryShown, , hideNewEntry, toggleNewEntry] = useToggleState(false);\r\n\r\n  return <div className=\"time-log-list\">\r\n    <div className=\"time-log-list-header\">\r\n      <h3 className=\"time-log-list-header-title\">Logged Time</h3>\r\n      <p className=\"time-log-list-header-time-spent\">Total: {formatDuration(timeSpent)}</p>\r\n      {\r\n        jobType === JobType.Task ? <button onClick={toggleNewEntry} className=\"time-log-list-header-new-log-button\">Log Time</button> : undefined\r\n      }\r\n    </div>\r\n    {\r\n      isNewEntryShown ? <TimeLogEntryNew taskId={jobId} onLog={hideNewEntry} className=\"time-log-list-header-new-log-entry\" onCancel={hideNewEntry} /> : undefined\r\n    }\r\n    <div className=\"time-log-list-entries\">\r\n      {\r\n        timeLogEntries.map((entryId, index) => <TimeLogEntry key={index} timeLogId={entryId} />)\r\n      }\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default TimeLogList;","import DescriptionField from \"../../fields/DescriptionField\";\r\nimport NameField from \"../../fields/NameField\";\r\nimport TimeLogList from \"../timelog/TimeLogList\";\r\nimport \"./JobPopup.css\";\r\nimport PopupContainer from \"../../popup/PopupContainer\";\r\n\r\ninterface IJobPopupParams {\r\n  jobId: string,\r\n  onClose: () => void,\r\n  isOpen: boolean\r\n}\r\n\r\nconst JobPopup = ({ jobId, onClose, isOpen }: IJobPopupParams) => {\r\n  return <PopupContainer\r\n    isOpen={isOpen} className=\"job-popup\"\r\n    onClose={onClose} showCloseButton onRequestClose={onClose}\r\n    closeOnEsc closeOnOverlayClick\r\n  >\r\n    <NameField id={jobId} />\r\n    <DescriptionField id={jobId} />\r\n    <TimeLogList jobId={jobId} />\r\n  </PopupContainer>;\r\n}\r\n\r\nexport default JobPopup;","import React, { useCallback, useState } from \"react\";\r\nimport ProjectLine from \"./jobs/ProjectLine\";\r\nimport TaskLine from \"./jobs/TaskLine\";\r\nimport \"./Body.css\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport JobPopup from \"./jobs/JobPopup\";\r\nimport LocalSettingOps from \"../../operations/LocalSettingOps\";\r\n\r\nconst Body = () => {\r\n  const [taskIds] = JobOps.useRootTasks();\r\n  const [rootProjects] = JobOps.useRootProjects();\r\n\r\n  const [openedJobId] = LocalSettingOps.useJobWithPopupOpen();\r\n\r\n  const onCreateChildProject = useCallback(() => {\r\n    JobOps.createRootProject();\r\n  }, []);\r\n\r\n  const onCreateChildTask = useCallback(() => {\r\n    JobOps.createRootTask();\r\n  }, []);\r\n\r\n  return <div className=\"body\">\r\n    <div className=\"project-header-right\">\r\n      <button className=\"project-button\" onClick={onCreateChildProject}>Add Project</button>\r\n      <button className=\"project-button\" onClick={onCreateChildTask}>Add Task</button>\r\n    </div>\r\n\r\n    <div className=\"body-tasks\">\r\n      {\r\n        taskIds ? taskIds.map((taskId, index) => {\r\n          return <TaskLine taskId={taskId} key={index} />\r\n        }) : undefined\r\n      }\r\n    </div>\r\n    <div className=\"body-projects\">\r\n      {\r\n        rootProjects.map((projectId, index) => {\r\n          return <ProjectLine projectId={projectId} key={index} />\r\n        })\r\n      }\r\n    </div>\r\n    {\r\n      openedJobId !== undefined ? <JobPopup jobId={openedJobId} onClose={LocalSettingOps.closePopup} isOpen={true} /> : undefined\r\n    }\r\n  </div>;\r\n};\r\n\r\nexport default Body;\r\n","import './App.css';\nimport Body from './components/body/Body';\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <h1>Task Manager</h1>\n      <Body />\n    </div>\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}