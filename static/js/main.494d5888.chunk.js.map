{"version":3,"sources":["data/CompletionStatus.ts","data/JobType.ts","data/ChangeType.ts","database/tables/TrackingTable.ts","database/tables/Table.ts","database/tables/StatusDefinitionTable.ts","database/tables/tracked/StatusLogTable.ts","database/tables/JobTable.ts","database/tables/tracked/DueDateLogTable.ts","database/tables/TimeLogTable.ts","database/tables/StatusTable.ts","database/tables/tracked/TimeLogHistoryTable.ts","database/LocalDatabase.ts","database/tables/tracked/EstimatedTimeBestCaseTable.ts","database/tables/tracked/EstimatedTimeExpectedTable.ts","database/tables/tracked/EstimatedTimeWorstCaseTable.ts","operations/DatabaseOps.ts","operations/JobOps.ts","operations/StatusDefinitionOps.ts","operations/StatusOps.ts","components/fields/CompletionStatusField.tsx","components/fields/DueDateField.tsx","operations/TimeLogOps.ts","components/fields/DurationField.tsx","components/fields/TextInputField.tsx","components/fields/TimeLogField.tsx","components/body/timelog/TimeLogEntryNew.tsx","components/fields/DescriptionField.tsx","components/fields/NameField.tsx","operations/UtilityHooks.ts","utility/StringUtility.ts","components/body/timelog/TimeLogEntry.tsx","components/body/timelog/TimeLogList.tsx","components/popup/PopupContainer.tsx","components/body/jobs/JobPopup.tsx","components/body/jobs/TaskLine.tsx","components/body/jobs/ProjectLine.tsx","components/body/Body.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CompletionStatus","CompletionStatusType","getCompletionStatusKey","status","JobType","CompletionStatusNames","Planned","InProgress","Completed","Void","getCompletionStatusName","ChangeType","TrackingTableColumn","Table","tableName","columnNames","columnCount","keyColumn","indexedColumns","defaultValues","trackingTables","_columnNames","Set","_indices","Map","_data","this","column","set","key","has","row","get","undefined","value","isIndexed","checkIndexed","prevValue","removeFromIndex","addToIndex","console","warn","getColumnName","Array","from","getIndexSet","add","delete","size","initialValues","i","length","getUniqueKey","replace","c","r","Math","random","toString","StatusDefinitionColumn","TrackingTable","defaultValue","__LENGTH","LOG_ID","ENTRY_ID","ENTRY_VALUE","Date","Update","getUuid","StatusLogTable","JobColumn","StatusDefinitionTable","KEY","TYPE","createRow","DueDateLogTable","TimeLogColumns","JobTable","keys","map","val","ID","JOB_TYPE","CHILD_PROJECT_OF","CHILD_TASK_OF","Task","DUE_DATE","Tables","DueDateLog","BEST_CASE_TIME","EstTimeBest","ESTIMATED_TIME","EstTimeExpected","WORST_CASE_TIME","EstTimeWorst","StatusTableColumns","TimeLogTable","JOB_ID","VALUE","TimeLogHistory","TimeLogHistoryTable","StatusTable","STATUS_TYPE","STATUS_VALUE","STATUS_ENTRY_ID","StatusLog","EstimatedTimeBestCaseTable","EstimatedTimeExpectedTable","EstimatedTimeWorstCaseTable","DatabaseTables","Jobs","StatusDefinitions","Status","TimeLog","Database","tableListeners","rowListeners","cellListeners","columnListeners","indexListeners","onLoad","log","table","getData","tableType","getRowsWithIndex","previousValue","getCell","_setCell","setData","_updateChangeTracking","_triggerIndexChange","changeType","trackingTable","trackingTableRow","generateDefaultRow","LOG_TIME","ENTRY_TYPE","triggerCallbackSet","callbackSet","callback","getTableColumnCount","fill","rowId","Create","valueListeners","listener","tableListener","rowListener","columnListener","loadInitialData","DatabaseOps","useCellState","useState","setValue","onDatabaseChange","useCallback","useEffect","addCellListener","removeCellListener","newValue","setCell","useReadonlyCellState","useIndexState","getIndex","initialValue","useRef","current","indices","setIndices","newValues","addIndexListener","removeIndexListener","useRelatedIndexState","indexedColumn","relatedColumn","getRelatedValues","getIndexState","relatedValues","setRelatedValues","getCellState","setCellState","JobOps","useName","jobId","NAME","useDescription","DESCRIPTION","useJobType","useDueDate","useTimeSpent","MINUTES_SPENT","useChildTasks","projectId","useRootTasks","useChildProjects","useRootProjects","createRootProject","createChildProject","createRootTask","createChildTask","Project","completionStatusValue","StatusDefinitionOps","useStatusName","statusType","type","LocalDatabase","assert","useAllStatusValuesAndNames","StatusOps","useCompletionStatus","completionStatusId","useMemo","statusIdsForJob","statusId","CompletionStatusField","id","completionStatus","setCompletionStatus","statusValuesAndNames","setCheckboxStatus","e","currentTarget","checked","setSelectStatus","className","onChange","index","name","DueDateField","dueDate","setDueDate","onChangeDueDate","valueAsDate","toISOString","substr","TimeLogOps","useLoggedTime","duration","createTimeLogEntry","useEntryIdsForJob","useEntryValues","logId","useTimeValue","timeValue","setTimeValue","updateTimeValue","taskId","updateTimeSpentForJobs","description","entryRow","newDuration","previousDuration","diff","currentTime","projectAncestorId","DurationField","forwardRef","ref","time","setTime","readonly","minutes","hours","setInputHours","valueAsNumber","setInputMinutes","min","max","step","readOnly","TextInputField","params","rows","match","minRows","maxRows","defaultOnFocus","setEditMode","defaultOnBlur","multiRow","editMode","onFocus","setEditModeOnFocus","onBlur","TimeLogField","setDuration","setDescription","allowToggleEditMode","onSetEditable","onSubmit","onSetReadonly","allowDelete","onDelete","durationRef","editButtonRef","onSave","focus","onClickEditButton","select","onClickCancelButton","onClick","hidden","TimeLogEntryNew","onLog","logInputTime","DescriptionField","NameField","setName","useToggleState","state","setState","toggleState","enableState","disableState","useSaveableState","valueFromSave","setValueFromSave","allowExternalUpdates","savedValue","setSavedValue","localValue","setLocalValue","formatDuration","floor","TimeLogEntry","timeLogId","setEditable","setReadonly","setLocalDescription","saveDescription","setLocalTimeValue","saveTimeValue","TimeLogList","jobType","timeLogEntries","timeSpent","isNewEntryShown","hideNewEntry","toggleNewEntry","entryId","PopupContainer","isOpen","onClose","children","showCloseButton","onRequestClose","closeOnEsc","closeOnOverlayClick","appElement","document","body","shouldCloseOnEsc","shouldCloseOnOverlayClick","JobPopup","TaskLine","bodyVisible","setBodyVisible","toggleBodyVisible","isPopupOpen","openPopup","closePopup","isTimeLogWidgetOpen","showTimeLogWidget","closeTimeLogWidget","ProjectLine","childTaskIds","childProjectIds","onCreateChildProject","onCreateChildTask","setPopupOpen","Fragment","Body","taskIds","rootProjects","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.494d5888.chunk.js","sourcesContent":["const CompletionStatusType = \"CompletionStatus\";\r\nexport {CompletionStatusType};\r\n\r\nexport enum CompletionStatus {\r\n  Planned,\r\n  InProgress,\r\n  Completed,\r\n  Void,\r\n}\r\n\r\nexport function getCompletionStatusKey(status: CompletionStatus) {\r\n  return `${CompletionStatusType}_${CompletionStatus[status]}`;\r\n}\r\n\r\nconst CompletionStatusNames = {\r\n  [CompletionStatus.Planned]: \"Planned\",\r\n  [CompletionStatus.InProgress]: \"In Progress\",\r\n  [CompletionStatus.Completed]: \"Completed\",\r\n  [CompletionStatus.Void]: \"Void\",\r\n}\r\n\r\nexport function getCompletionStatusName(status: CompletionStatus) {\r\n  return CompletionStatusNames[status];\r\n}","// This shouldn't be customizable.\r\n\r\nexport enum JobType {\r\n  Task = \"JobType_Task\",\r\n  Project = \"JobType_Project\",\r\n}","export enum ChangeType {\r\n  Create,\r\n  Update,\r\n  Delete,\r\n}","import { ChangeType } from \"../../data/ChangeType\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum TrackingTableColumn {\r\n  LOG_ID, LOG_TIME,\r\n  ENTRY_ID, ENTRY_TYPE, ENTRY_VALUE,\r\n\r\n  __LENGTH\r\n}\r\n\r\ntype ValidTrackingTableColumn = Exclude<TrackingTableColumn, TrackingTableColumn.__LENGTH>;\r\n\r\ntype TrackingTableColumnTypes<ValueType> = [\r\n  string, Date,\r\n  string, ChangeType, ValueType,\r\n];\r\n\r\ninterface ITrackingTableParams<ValueType> {\r\n  tableName: string,\r\n  defaultValue: ValueType,\r\n}\r\n\r\nexport default abstract class TrackingTable<ValueType> extends Table<ValidTrackingTableColumn, TrackingTableColumnTypes<ValueType>,\r\n  TrackingTableColumnTypes<ValueType>[TrackingTableColumn.LOG_ID]> {\r\n  constructor({\r\n    tableName, defaultValue,\r\n  }: ITrackingTableParams<ValueType>) {\r\n    super({\r\n      tableName: tableName,\r\n      columnCount: TrackingTableColumn.__LENGTH,\r\n      columnNames: [\r\n        \"LOG_ID\", \"LOG_TIME\", \"ENTRY_ID\", \"ENTRY_TYPE\", \"ENTRY_VALUE\"\r\n      ],\r\n      keyColumn: TrackingTableColumn.LOG_ID,\r\n      indexedColumns: [\r\n        TrackingTableColumn.ENTRY_ID, TrackingTableColumn.ENTRY_VALUE,\r\n      ],\r\n      defaultValues: [\"\", new Date(), \"\", ChangeType.Update, defaultValue],\r\n      trackingTables: new Map(),\r\n    });\r\n  }\r\n\r\n  protected getUniqueKey() {\r\n    return this.getUuid();\r\n  }\r\n}\r\n\r\n","import { Tables, TrackedTables } from \"../LocalDatabase\";\r\nimport TrackingTable from \"./TrackingTable\";\r\n\r\nexport default abstract class Table<CDef extends number, CType extends any[], KeyType> {\r\n  public readonly tableName: string;\r\n  private _columnNames: Record<CDef, string>;\r\n\r\n  public readonly columnCount: number;\r\n  \r\n  public readonly keyColumn: CDef;\r\n\r\n  private readonly defaultValues: CType;\r\n  \r\n  public indexedColumns: ReadonlySet<CDef> = new Set();\r\n  public _indices: Map<CDef, Map<any, Set<KeyType>>> = new Map();\r\n\r\n  protected _data: Map<KeyType, CType> = new Map();\r\n\r\n  public readonly trackingTables: ReadonlyMap<CDef, TrackedTables>;\r\n\r\n  public constructor({ tableName, columnNames, columnCount, keyColumn, indexedColumns, defaultValues, trackingTables}: TableParameters<CDef, CType>) {\r\n    this.tableName = tableName;\r\n    this._columnNames = columnNames;\r\n    this.columnCount = columnCount;\r\n\r\n    this.keyColumn = keyColumn;\r\n    this.indexedColumns = new Set(indexedColumns);\r\n    for (const column of indexedColumns) {\r\n      this._indices.set(column, new Map());\r\n    }\r\n\r\n    this.defaultValues = defaultValues;\r\n\r\n    this.trackingTables = trackingTables;\r\n  }\r\n\r\n  public onLoad() {\r\n    \r\n  }\r\n\r\n  public getColumnName(column: CDef): string {\r\n    return this._columnNames[column];\r\n  }\r\n\r\n  public checkRowExists(key: KeyType): boolean {\r\n    return this._data.has(key);\r\n  }\r\n\r\n  public getData<T extends CDef>(key: KeyType, column: T): CType[T] {\r\n    const row = this._data.get(key);\r\n    return row ? row[column] : undefined;\r\n  }\r\n\r\n  public setData<T extends CDef>(key: KeyType, column: T, value: CType[T]): void {\r\n    const row = this._data.get(key);\r\n    if (!row) {\r\n      return;\r\n    }\r\n    const isIndexed = this.checkIndexed(column);\r\n    if (isIndexed) {\r\n      const prevValue = row[column];\r\n      this.removeFromIndex(column, prevValue, key);\r\n    }\r\n    row[column] = value;\r\n    if (isIndexed) {\r\n      this.addToIndex(column, value, key);\r\n    }\r\n  }\r\n\r\n  checkIndexed(column: CDef) {\r\n    return this.indexedColumns.has(column);\r\n  }\r\n\r\n  public hasRowWithIndex<T extends CDef>(column: T, value: CType[T]): boolean {\r\n    if (!this.checkIndexed(column)) {\r\n      console.warn(`Table ${this.tableName} does not have an index on column ${this.getColumnName(column)}.`);\r\n      return false;\r\n    }\r\n    return this._indices.get(column)!.has(value);\r\n  }\r\n\r\n  public getRowsWithIndex<T extends CDef>(column: T, value: CType[T]): KeyType[] {\r\n    if (!this.indexedColumns.has(column)) {\r\n      console.warn(`Table ${this.tableName} does not have an index on column ${this.getColumnName(column)}.`);\r\n      return [];\r\n    }\r\n    return Array.from(this._indices.get(column)!.get(value) || []);\r\n  }\r\n\r\n  private getIndexSet<T extends CDef>(column: T, value: CType[T] | undefined): Set<KeyType> | undefined {\r\n    return this._indices.get(column)!.get(value);\r\n  }\r\n\r\n  private addToIndex<T extends CDef>(column: CDef, value: CType[T] | undefined, key: KeyType): void {\r\n    let set = this.getIndexSet(column, value);\r\n    if (set === undefined) {\r\n      set = new Set();\r\n      this._indices.get(column)!.set(value, set);\r\n    }\r\n    set.add(key);\r\n  }\r\n\r\n  private removeFromIndex<T extends CDef>(column: CDef, value: CType[T] | undefined, key: KeyType): void {\r\n    let set = this.getIndexSet(column, value)!;\r\n    set.delete(key);\r\n    if (set.size === 0) {\r\n      this._indices.get(column)!.delete(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new row in the database with all values empty except for a key.\r\n   */\r\n  public createRow(initialValues?: OptionalTuple<CType>): KeyType {\r\n    const row = Array.from(this.defaultValues) as CType;\r\n    if (initialValues !== undefined) {\r\n      for (let i = 0; i < row.length; i++) {\r\n        if (initialValues[i] !== undefined) {\r\n          row[i] = initialValues[i];\r\n        }\r\n      }\r\n    }\r\n    let key: KeyType;\r\n    if (initialValues === undefined ||\r\n      initialValues[this.keyColumn] === undefined ||\r\n      this._data.has(row[this.keyColumn])) {\r\n      // Set a default key if the user didn't provide one or if the key already exists.\r\n      key = this.getUniqueKey();\r\n      row[this.keyColumn] = key;\r\n    } else {\r\n      key = row[this.keyColumn];\r\n    }\r\n    this._data.set(key, row);\r\n    for (const column of this.indexedColumns) {\r\n      this.addToIndex(column, row[column], key);\r\n    }\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * Copied from https://stackoverflow.com/a/2117523\r\n   * @returns An almost unique identifier\r\n   */\r\n  protected abstract getUniqueKey(): KeyType;\r\n\r\n  protected getUuid(): string {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n}\r\n\r\ninterface TableParameters<CDef extends number, CType extends any[]> {\r\n  tableName: string,\r\n  columnCount: number,\r\n  columnNames: Record<CDef, string>, // Use record because iterating can be done using numbers.\r\n  keyColumn: CDef,\r\n  defaultValues: CType,\r\n  indexedColumns: Iterable<CDef>,\r\n  trackingTables: Map<CDef, TrackedTables>,\r\n};\r\n\r\nexport type OptionalTuple<T extends any[]> =\r\n  T extends [infer P1] ? [P1?] :\r\n  T extends [infer P1, infer P2] ? [P1?, P2?] :\r\n  T extends [infer P1, infer P2, infer P3] ? [P1?, P2?, P3?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4] ? [P1?, P2?, P3?, P4?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5] ? [P1?, P2?, P3?, P4?, P5?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6] ? [P1?, P2?, P3?, P4?, P5?, P6?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10, infer P11] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?, P11?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10, infer P11, infer P12] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?, P11?, P12?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10, infer P11, infer P12, infer P13] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?, P11?, P12?, P13?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10, infer P11, infer P12, infer P13, infer P14] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?, P11?, P12?, P13?, P14?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10, infer P11, infer P12, infer P13, infer P14, infer P15] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?, P11?, P12?, P13?, P14?, P15?] :\r\n  T extends [infer P1, infer P2, infer P3, infer P4, infer P5, infer P6, infer P7, infer P8, infer P9, infer P10, infer P11, infer P12, infer P13, infer P14, infer P15, infer P16] ? [P1?, P2?, P3?, P4?, P5?, P6?, P7?, P8?, P9?, P10?, P11?, P12?, P13?, P14?, P15?, P16?] : never;","import { CompletionStatusType, CompletionStatus, getCompletionStatusKey, getCompletionStatusName } from \"../../data/CompletionStatus\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum StatusDefinitionColumn {\r\n  KEY, TYPE, NAME, DESCRIPTION,\r\n\r\n  __LENGTH\r\n}\r\n\r\ntype ValidStatusDefinitionColumn = Exclude<StatusDefinitionColumn, StatusDefinitionColumn.__LENGTH>;\r\n\r\ntype StatusDefinitionColumnTypes = [string, string, string, string];\r\n\r\nexport default class StatusDefinitionTable extends Table<ValidStatusDefinitionColumn,\r\n  StatusDefinitionColumnTypes, StatusDefinitionColumnTypes[StatusDefinitionColumn.KEY]> {\r\n  \r\n  constructor() {\r\n    super({\r\n      tableName: \"STATUS_DEFINTIIONS\",\r\n      columnCount: StatusDefinitionColumn.__LENGTH,\r\n      columnNames: [\r\n        \"KEY\", \"TYPE\", \"NAME\", \"DESCRIPTION\"\r\n      ],\r\n      indexedColumns: [StatusDefinitionColumn.KEY, StatusDefinitionColumn.TYPE],\r\n      defaultValues: [\"\", \"\", \"\", \"\"],\r\n      keyColumn: StatusDefinitionColumn.KEY,\r\n      trackingTables: new Map(),\r\n    })\r\n  }\r\n\r\n  public onLoad() {\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.Planned), CompletionStatusType, getCompletionStatusName(CompletionStatus.Planned), \"Planned Description\"]);\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.InProgress), CompletionStatusType, getCompletionStatusName(CompletionStatus.InProgress), \"In Progress Description\"]);\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.Completed), CompletionStatusType, getCompletionStatusName(CompletionStatus.Completed), \"Completed Description\"]);\r\n    this.createRow([getCompletionStatusKey(CompletionStatus.Void), CompletionStatusType, getCompletionStatusName(CompletionStatus.Void), \"Void Description\"]);\r\n  }\r\n  \r\n  protected getUniqueKey(): string {\r\n    return this.getUuid();\r\n  }\r\n\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class StatusLogTable extends TrackingTable<string> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"STATUS_TABLE_LOG\",\r\n      defaultValue: \"\",\r\n    })\r\n  }\r\n}","import { JobType } from \"../../data/JobType\";\r\nimport { Tables } from \"../LocalDatabase\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum JobColumn {\r\n  ID, NAME, JOB_TYPE,\r\n  CHILD_TASK_OF, CHILD_PROJECT_OF,\r\n  DESCRIPTION, DUE_DATE,\r\n  BEST_CASE_TIME, ESTIMATED_TIME, WORST_CASE_TIME,\r\n  MINUTES_SPENT,\r\n\r\n  __LENGTH\r\n}\r\ntype ValidJobColumn = Exclude<JobColumn, JobColumn.__LENGTH>;\r\ntype JobColumnTypes = [\r\n  string, string, JobType,\r\n  string | undefined, string | undefined,\r\n  string, Date,\r\n  number, number, number,\r\n  number,\r\n];\r\n\r\nexport default class JobTable extends Table<ValidJobColumn, JobColumnTypes, JobColumnTypes[JobColumn.ID]> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"JOBS\",\r\n      columnCount: JobColumn.__LENGTH,\r\n      columnNames: ([...Array(JobColumn.__LENGTH).keys()] as JobColumn[]).map((val) => JobColumn[val]) as unknown as any, //i hate typescript\r\n      keyColumn: JobColumn.ID,\r\n      indexedColumns: [\r\n        JobColumn.JOB_TYPE, JobColumn.CHILD_PROJECT_OF, JobColumn.CHILD_TASK_OF,\r\n      ],\r\n      defaultValues: [\r\n        \"\", \"\", JobType.Task,\r\n        undefined, undefined,\r\n        \"\", new Date(),\r\n        0, 0, 0,\r\n        0,\r\n      ],\r\n      trackingTables: new Map([\r\n        [JobColumn.DUE_DATE, Tables.DueDateLog],\r\n        [JobColumn.BEST_CASE_TIME, Tables.EstTimeBest],\r\n        [JobColumn.ESTIMATED_TIME, Tables.EstTimeExpected],\r\n        [JobColumn.WORST_CASE_TIME, Tables.EstTimeWorst],\r\n      ]),\r\n    });\r\n  }\r\n\r\n  protected getUniqueKey() {\r\n    return this.getUuid();\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class DueDateLogTable extends TrackingTable<Date> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"DUE_DATE_LOG\",\r\n      defaultValue: new Date(),\r\n    });\r\n  }\r\n}\r\n\r\n","import { Tables } from \"../LocalDatabase\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum TimeLogColumns {\r\n  LOG_ID, JOB_ID, VALUE,\r\n  DESCRIPTION,\r\n\r\n  __LENGTH,\r\n}\r\n\r\ntype ValidTimeLogColumn = Exclude<TimeLogColumns, TimeLogColumns.__LENGTH>;\r\n\r\ntype TimeLogColumnTypes = [\r\n  string, string, number, string,\r\n]\r\n\r\nexport default class TimeLogTable extends Table<ValidTimeLogColumn, TimeLogColumnTypes, TimeLogColumnTypes[TimeLogColumns.LOG_ID]> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"TIME_LOG\",\r\n      columnCount: TimeLogColumns.__LENGTH,\r\n      columnNames: [\r\n        \"LOG_ID\", \"JOB_ID\", \"VALUE\",\r\n        \"DESCRIPTION\",\r\n      ],\r\n      defaultValues: [\r\n        \"\", \"\", 0, \"\",\r\n      ],\r\n      indexedColumns: [\r\n        TimeLogColumns.JOB_ID,\r\n      ],\r\n      keyColumn: TimeLogColumns.LOG_ID,\r\n      trackingTables: new Map([\r\n        [TimeLogColumns.VALUE, Tables.TimeLogHistory],\r\n      ]),\r\n    });\r\n  }\r\n  \r\n  protected getUniqueKey(): string {\r\n    return this.getUuid();\r\n  }\r\n  \r\n}","import { Tables } from \"../LocalDatabase\";\r\nimport Table from \"./Table\";\r\n\r\nexport enum StatusTableColumns {\r\n  STATUS_ENTRY_ID,\r\n  STATUS_VALUE,\r\n  STATUS_TYPE,\r\n  JOB_ID,\r\n\r\n  __LENGTH,\r\n}\r\n\r\ntype ValidStatusTableColumn = Exclude<StatusTableColumns, StatusTableColumns.__LENGTH>;\r\n\r\ntype StatusTableColumnTypes = [\r\n  string,\r\n  string,\r\n  string,\r\n  string,\r\n]\r\n\r\nexport default class StatusTable extends Table<ValidStatusTableColumn, StatusTableColumnTypes, StatusTableColumnTypes[StatusTableColumns.STATUS_ENTRY_ID]> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"STATUS_TABLE\",\r\n      columnCount: StatusTableColumns.__LENGTH,\r\n      columnNames: [\r\n        \"STATUS_ENTRY_ID\",\r\n        \"STATUS_VALUE\",\r\n        \"STATUS_TYPE\",\r\n        \"JOB_ID\",\r\n      ],\r\n      defaultValues: [\r\n        \"\", \"\", \"\", \"\",\r\n      ],\r\n      indexedColumns: [\r\n        StatusTableColumns.JOB_ID,\r\n        StatusTableColumns.STATUS_TYPE,\r\n        StatusTableColumns.STATUS_VALUE,\r\n      ],\r\n      keyColumn: StatusTableColumns.STATUS_ENTRY_ID,\r\n      trackingTables: new Map([\r\n        [StatusTableColumns.STATUS_VALUE, Tables.StatusLog],\r\n      ]),\r\n    })\r\n  }\r\n\r\n  protected getUniqueKey(): string {\r\n    return this.getUuid();\r\n  }\r\n  \r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class TimeLogHistoryTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"TIME_LOG_HISTORY\",\r\n      defaultValue: 0,\r\n    });\r\n  }\r\n}","import StatusLogTable from \"./tables/tracked/StatusLogTable\";\r\nimport StatusDefinitionTable from \"./tables/StatusDefinitionTable\";\r\nimport Table, { OptionalTuple } from \"./tables/Table\";\r\nimport DueDateLogTable from \"./tables/tracked/DueDateLogTable\";\r\nimport JobTable from \"./tables/JobTable\";\r\nimport TimeLogTable from \"./tables/TimeLogTable\";\r\nimport TimeLogHistoryTable from \"./tables/tracked/TimeLogHistoryTable\";\r\nimport StatusTable from \"./tables/StatusTable\";\r\nimport { TrackingTableColumn } from \"./tables/TrackingTable\";\r\nimport { ChangeType } from \"../data/ChangeType\";\r\nimport EstimatedTimeBestCaseTable from \"./tables/tracked/EstimatedTimeBestCaseTable\";\r\nimport EstimatedTimeExpectedTable from \"./tables/tracked/EstimatedTimeExpectedTable\";\r\nimport EstimatedTimeWorstCaseTable from \"./tables/tracked/EstimatedTimeWorstCaseTable\";\r\n\r\nexport enum Tables {\r\n  Jobs = \"Jobs\",\r\n  StatusDefinitions = \"StatusDefinitions\",\r\n  StatusLog = \"StatusLog\",\r\n  Status = \"Status\",\r\n  DueDateLog = \"DueDateLog\",\r\n  TimeLog = \"TimeLog\",\r\n  TimeLogHistory = \"TimeLogHistory\",\r\n\r\n  EstTimeBest = \"EstTimeBest\",\r\n  EstTimeExpected = \"EstTimeExpected\",\r\n  EstTimeWorst = \"EstTimeWorst\",\r\n}\r\n\r\nexport type TrackedTables = Tables.DueDateLog | Tables.TimeLogHistory | Tables.StatusLog\r\n  | Tables.EstTimeBest | Tables.EstTimeExpected | Tables.EstTimeWorst;\r\n\r\n// There are a lot of hacks relating to types in the code below.\r\n// Most of them are due to limitations on Typescript's support for containers of different types.\r\n// But since the main goal of this class is to define behavior shared between all Tables,\r\n// it doesn't matter as much. \r\n// The alternative is to use \"any\" everywhere, which also means little type checking.\r\n// But it would also provide no benefit to consumer code.\r\n\r\nconst DatabaseTables = {\r\n  [Tables.Jobs]: new JobTable(),\r\n  [Tables.StatusDefinitions]: new StatusDefinitionTable(),\r\n  [Tables.StatusLog]: new StatusLogTable(),\r\n  [Tables.Status]: new StatusTable(),\r\n  [Tables.DueDateLog]: new DueDateLogTable(),\r\n  [Tables.TimeLog]: new TimeLogTable(),\r\n  [Tables.TimeLogHistory]: new TimeLogHistoryTable(),\r\n  [Tables.EstTimeBest]: new EstimatedTimeBestCaseTable(),\r\n  [Tables.EstTimeExpected]: new EstimatedTimeExpectedTable(),\r\n  [Tables.EstTimeWorst]: new EstimatedTimeWorstCaseTable(),\r\n} as const;\r\n\r\nclass LocalDatabase {\r\n  private tableListeners: Map<Tables, Set<ChangeCallback>> = new Map();\r\n  // Map from tables to rows to callbacks.\r\n  private rowListeners: Map<Tables, Map<any, Set<ChangeCallback>>> = new Map();\r\n  // Map from tables to rows to column to callbacks. \r\n  private cellListeners: Map<Tables, Map<any, Map<any, Set<ChangeCallback>>>> = new Map();\r\n  // Map from tables to columns to callbacks.\r\n  private columnListeners: Map<Tables, Map<any, Set<ChangeCallback>>> = new Map();\r\n  // Map from tables to columns to indices (column values) to callbacks.\r\n  private indexListeners: Map<Tables, Map<any, Map<any, Set<ChangeCallback>>>> = new Map();\r\n\r\n  public async loadInitialData() {\r\n    for (const key in DatabaseTables) {\r\n      DatabaseTables[key as keyof typeof DatabaseTables].onLoad();\r\n    }\r\n  }\r\n\r\n  public logTableData() {\r\n    console.log(DatabaseTables);\r\n  }\r\n\r\n  //#region Data Access\r\n\r\n  public getTableColumnCount(table: Tables) {\r\n    return DatabaseTables[table].columnCount;\r\n  }\r\n\r\n  public getCell<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C): ColumnType<T, C> {\r\n    return (DatabaseTables[table] as unknown as JobTable).getData(key as KeyType<Tables.Jobs>, column) as unknown as ColumnType<T, C>;\r\n  }\r\n\r\n  public getIndex<T extends Tables, C extends ColumnDef<T>>(tableType: T, column: C, value: ColumnType<T, C>): KeyType<T>[] {\r\n    const table = DatabaseTables[tableType] as JobTable;\r\n    return table.getRowsWithIndex(column, value) as KeyType<T>[];\r\n  }\r\n\r\n  public setCell<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C, value: ColumnType<T, C>) {\r\n    const previousValue = this.getCell(table, key, column);\r\n    if (previousValue === value) {\r\n      return;\r\n    }\r\n    this._setCell(table, key, column, value, previousValue);\r\n  }\r\n\r\n  private _setCell<T extends Tables, C extends ColumnDef<T>>(tableName: T, key: KeyType<T>, column: C, value: ColumnType<T, C>, previousValue: ColumnType<T, C>) {\r\n    const table = DatabaseTables[tableName] as unknown as JobTable;\r\n    table.setData(key as KeyType<Tables.Jobs>, column, value);\r\n    this._updateChangeTracking(tableName, key, column, value, ChangeType.Update);\r\n    this._triggerIndexChange(tableName, key, column, value, previousValue);\r\n  }\r\n\r\n  private _updateChangeTracking<T extends Tables, C extends ColumnDef<T>>(tableName: T, key: KeyType<T>, column: C, value: ColumnType<T, C>, changeType: ChangeType) {\r\n    const table = DatabaseTables[tableName] as unknown as JobTable;\r\n    if (!table.trackingTables.has(column)) {\r\n      return;\r\n    }\r\n    if (table.trackingTables.has(column)) {\r\n      const trackingTable = table.trackingTables.get(column)!;\r\n      const trackingTableRow = this.generateDefaultRow(trackingTable);\r\n      trackingTableRow[TrackingTableColumn.LOG_TIME] = new Date();\r\n      trackingTableRow[TrackingTableColumn.ENTRY_ID] = key as string; // hack\r\n      trackingTableRow[TrackingTableColumn.ENTRY_TYPE] = changeType;\r\n      trackingTableRow[TrackingTableColumn.ENTRY_VALUE] = value;\r\n\r\n      this.createRow(trackingTable, trackingTableRow)\r\n    }\r\n  }\r\n\r\n  private _triggerIndexChange<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C, value: ColumnType<T, C>, previousValue: ColumnType<T, C>) {\r\n    // TODO: Do we want to change the order?\r\n    this.triggerCallbackSet(this.tableListeners.get(table));\r\n    this.triggerCallbackSet(this.rowListeners.get(table)?.get(key));\r\n    this.triggerCallbackSet(this.cellListeners.get(table)?.get(key)?.get(column));\r\n    this.triggerCallbackSet(this.columnListeners.get(table)?.get(column));\r\n    // Need to trigger index change for both old and new value.\r\n    this.triggerCallbackSet(this.indexListeners.get(table)?.get(column)?.get(previousValue));\r\n    this.triggerCallbackSet(this.indexListeners.get(table)?.get(column)?.get(value));\r\n  }\r\n\r\n  private triggerCallbackSet(callbackSet?: Set<ChangeCallback>) {\r\n    if (!callbackSet) {\r\n      return;\r\n    }\r\n    for (const callback of callbackSet) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  public generateDefaultRow<T extends Tables>(table: T) {\r\n    return Array(Database.getTableColumnCount(table)).fill(undefined) as OptionalTuple<ColumnTypes<T>>;\r\n  }\r\n\r\n  public createRow<T extends Tables>(table: T, initialValues?: OptionalTuple<ColumnTypes<T>>) {\r\n    const rowId = DatabaseTables[table].createRow(initialValues as any) as KeyType<T>;\r\n    \r\n    for (const [column] of DatabaseTables[table].trackingTables as ReadonlyMap<ColumnDef<T>, TrackedTables>) {\r\n      this._updateChangeTracking(table, rowId, column, this.getCell(table, rowId, column as unknown as ColumnDef<T>), ChangeType.Create);\r\n    }\r\n\r\n    this.triggerCallbackSet(this.tableListeners.get(table));\r\n    if (this.columnListeners.has(table)) {\r\n      for (const column of this.columnListeners.get(table)!) {\r\n        this.triggerCallbackSet(this.columnListeners.get(table)!.get(column));\r\n      }\r\n    }\r\n    if (this.indexListeners.has(table)) {\r\n      for (const [_, columnListeners] of this.indexListeners.get(table)!) {\r\n        for (const [_, valueListeners] of columnListeners) {\r\n          this.triggerCallbackSet(valueListeners);\r\n        }\r\n      }\r\n    }\r\n    // Do not trigger row or cell because it does not exist until now.\r\n    return rowId;\r\n  }\r\n\r\n  //#endregion Data Access\r\n\r\n  //#region Listeners\r\n\r\n  public addTableListener(table: Tables, listener: ChangeCallback) {\r\n    if (!this.tableListeners.has(table)) {\r\n      this.tableListeners.set(table, new Set());\r\n    }\r\n    this.tableListeners.get(table)!.add(listener);\r\n  }\r\n\r\n  public removeTableListener(table: Tables, listener: ChangeCallback) {\r\n    if (!this.tableListeners.has(table)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table]);\r\n      return;\r\n    }\r\n    const tableListeners = this.tableListeners.get(table)!;\r\n    if (!tableListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table]);\r\n      return;\r\n    }\r\n    tableListeners.delete(listener);\r\n    if (tableListeners.size === 0) {\r\n      this.tableListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addRowListener<T extends Tables>(table: T, key: KeyType<T>, listener: ChangeCallback) {\r\n    if (!this.rowListeners.has(table)) {\r\n      this.rowListeners.set(table, new Map());\r\n    }\r\n    if (!this.rowListeners.get(table)!.has(key)) {\r\n      this.rowListeners.get(table)!.set(key, new Set());\r\n    }\r\n    this.rowListeners.get(table)!.get(key)!.add(listener);\r\n  }\r\n\r\n  public removeRowListener<T extends Tables>(table: T, key: KeyType<T>, listener: ChangeCallback) {\r\n    if (!this.rowListeners.has(table) || !this.rowListeners.get(table)!.has(key)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key);\r\n      return;\r\n    }\r\n    const tableListeners = this.rowListeners.get(table)!;\r\n    const rowListeners = tableListeners.get(key)!;\r\n    if (!rowListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key);\r\n      return;\r\n    }\r\n    rowListeners.delete(listener);\r\n    if (rowListeners.size === 0) {\r\n      tableListeners.delete(key);\r\n    }\r\n    if (tableListeners.size === 0) {\r\n      this.rowListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addCellListener<T extends Tables>(table: T, key: KeyType<T>, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.cellListeners.has(table)) {\r\n      this.cellListeners.set(table, new Map());\r\n    }\r\n    if (!this.cellListeners.get(table)!.has(key)) {\r\n      this.cellListeners.get(table)!.set(key, new Map());\r\n    }\r\n    if (!this.cellListeners.get(table)!.get(key)!.has(column)) {\r\n      this.cellListeners.get(table)!.get(key)!.set(column, new Set());\r\n    }\r\n    this.cellListeners.get(table)!.get(key)!.get(column)!.add(listener);\r\n  }\r\n\r\n  public removeCellListener<T extends Tables>(table: T, key: KeyType<T>, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.cellListeners.has(table) || !this.cellListeners.get(table)!.has(key) || !this.cellListeners.get(table)!.get(key)!.has(column)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key, column);\r\n      return;\r\n    }\r\n    const tableListener = this.cellListeners.get(table)!;\r\n    const rowListener = tableListener.get(key)!;\r\n    const cellListeners = rowListener.get(column)!;\r\n    if (!cellListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], key, column);\r\n      return;\r\n    }\r\n    cellListeners.delete(listener);\r\n    if (cellListeners.size === 0) {\r\n      rowListener.delete(column);\r\n    }\r\n    if (rowListener.size === 0) {\r\n      tableListener.delete(key);\r\n    }\r\n    if (tableListener.size === 0) {\r\n      this.cellListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addColumnListener<T extends Tables>(table: T, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.columnListeners.has(table)) {\r\n      this.columnListeners.set(table, new Map());\r\n    }\r\n    if (!this.columnListeners.get(table)!.has(column)) {\r\n      this.columnListeners.get(table)!.set(column, new Set());\r\n    }\r\n    this.columnListeners.get(table)!.get(column)!.add(listener);\r\n  }\r\n\r\n  public removeColumnListener<T extends Tables>(table: T, column: ColumnDef<T>, listener: ChangeCallback) {\r\n    if (!this.columnListeners.has(table) || !this.columnListeners.get(table)!.has(column)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column);\r\n      return;\r\n    }\r\n    const tableListeners = this.columnListeners.get(table)!;\r\n    const columnListeners = tableListeners.get(column)!;\r\n    if (!columnListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column);\r\n      return;\r\n    }\r\n    columnListeners.delete(listener);\r\n    if (columnListeners.size === 0) {\r\n      tableListeners.delete(column);\r\n    }\r\n    if (tableListeners.size === 0) {\r\n      this.columnListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  public addIndexListener<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>, listener: ChangeCallback) {\r\n    if (!this.indexListeners.has(table)) {\r\n      this.indexListeners.set(table, new Map());\r\n    }\r\n    if (!this.indexListeners.get(table)!.has(column)) {\r\n      this.indexListeners.get(table)!.set(column, new Map());\r\n    }\r\n    if (!this.indexListeners.get(table)!.get(column)!.has(value)) {\r\n      this.indexListeners.get(table)!.get(column)!.set(value, new Set());\r\n    }\r\n    this.indexListeners.get(table)!.get(column)!.get(value)!.add(listener);\r\n  }\r\n\r\n  public removeIndexListener<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>, listener: ChangeCallback) {\r\n    if (!this.indexListeners.has(table) || !this.indexListeners.get(table)!.has(column) || !this.indexListeners.get(table)!.get(column)!.has(value)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column, value);\r\n      return;\r\n    }\r\n    const tableListener = this.indexListeners.get(table)!;\r\n    const columnListener = tableListener.get(column)!;\r\n    const indexListeners = columnListener.get(value)!;\r\n    if (!indexListeners.has(listener)) {\r\n      console.warn(\"Attempting to remove non-existent listener from \", Tables[table], column, value);\r\n      return;\r\n    }\r\n    indexListeners.delete(listener);\r\n    if (indexListeners.size === 0) {\r\n      columnListener.delete(value);\r\n    }\r\n    if (columnListener.size === 0) {\r\n      tableListener.delete(column);\r\n    }\r\n    if (tableListener.size === 0) {\r\n      this.indexListeners.delete(table);\r\n    }\r\n  }\r\n\r\n  //#endregion Listeners\r\n}\r\n\r\ntype TableType<T extends Tables> = (typeof DatabaseTables)[T];\r\nexport type KeyType<T extends Tables> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? KeyType : never;\r\nexport type ColumnDef<T extends Tables> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? CDef : never;\r\nexport type ColumnTypes<T extends Tables> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? CType : never;\r\nexport type ColumnType<T extends Tables, C extends ColumnDef<T>> = TableType<T> extends Table<infer CDef, infer CType, infer KeyType> ? CType[C] : never;\r\n\r\ntype ChangeCallback = () => void;\r\n\r\nconst Database = new LocalDatabase();\r\nDatabase.loadInitialData();\r\n\r\nexport default Database;\r\n\r\nconsole.log(Database);\r\nconsole.log(DatabaseTables);","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class EstimatedTimeBestCaseTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"ESTIMATED_TIME_BEST_CASE\",\r\n      defaultValue: 0,\r\n    });\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class EstimatedTimeExpectedTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"ESTIMATED_TIME_EXPECTED\",\r\n      defaultValue: 0,\r\n    });\r\n  }\r\n}","import TrackingTable from \"../TrackingTable\";\r\n\r\nexport default class EstimatedTimeWorstCaseTable extends TrackingTable<number> {\r\n  constructor() {\r\n    super({\r\n      tableName: \"ESTIMATED_TIME_WORST_CASE\",\r\n      defaultValue: 0,\r\n    });\r\n  }\r\n}","import { useState, useCallback, useEffect, useMemo, useRef, RefObject, MutableRefObject } from \"react\";\r\nimport Database, { Tables, ColumnDef, ColumnType, KeyType, ColumnTypes } from \"../database/LocalDatabase\";\r\nimport { OptionalTuple } from \"../database/tables/Table\";\r\n\r\nconst DatabaseOps = {\r\n  useCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C) {\r\n    const [value, setValue] = useState(Database.getCell(table, key, column));\r\n\r\n    const onDatabaseChange = useCallback(() => {\r\n      setValue(Database.getCell(table, key, column));\r\n    }, [table, key, column]); // Only the key should be necessary, but let's be safe.\r\n\r\n    useEffect(() => {\r\n      Database.addCellListener(table, key, column, onDatabaseChange);\r\n\r\n      return () => {\r\n        Database.removeCellListener(table, key, column, onDatabaseChange);\r\n      }\r\n    }, [table, key, column, onDatabaseChange]);\r\n\r\n    const setDatabaseValue = useCallback((newValue: ColumnType<T, C>) => {\r\n      Database.setCell(table, key, column, newValue);\r\n    }, [table, key, column]);\r\n    return [value, setDatabaseValue] as const;\r\n  },\r\n\r\n  useReadonlyCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C) {\r\n    const [state] = DatabaseOps.useCellState(table, key, column);\r\n    return [state];\r\n  },\r\n\r\n  useIndexState<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>): [KeyType<T>[]] {\r\n    const getIndex = useCallback(() => {\r\n      return Database.getIndex(table, column, value)\r\n    }, [table, column, value]);\r\n    const initialValue = useRef<KeyType<T>[]>(null) as MutableRefObject<KeyType<T>[]>;\r\n    if (initialValue.current === null) {\r\n      initialValue.current = getIndex();\r\n    }\r\n    const [indices, setIndices] = useState(initialValue.current);\r\n\r\n    const onDatabaseChange = useCallback(() => {\r\n      const newValues = getIndex();\r\n      setIndices(newValues);\r\n    }, [indices, setIndices, getIndex]);\r\n\r\n    useEffect(() => {\r\n      // Note: Can't attach to the cells in indices because another row might be set to value. \r\n      Database.addIndexListener(table, column, value, onDatabaseChange);\r\n\r\n      return () => {\r\n        Database.removeIndexListener(table, column, value, onDatabaseChange);\r\n      }\r\n    }, [table, column, value, onDatabaseChange])\r\n\r\n    // Users can't change composite data, so don't return a setter.\r\n    return [indices];\r\n  },\r\n\r\n  useRelatedIndexState<T extends Tables, CIdx extends ColumnDef<T>, CRel extends ColumnDef<T>>(table: T,\r\n    indexedColumn: CIdx, value: ColumnType<T, CIdx>, relatedColumn: CRel): [(readonly [KeyType<T>, ColumnType<T, CRel>])[]] {\r\n\r\n    const getRelatedValues = useCallback(() => {\r\n      const indices = DatabaseOps.getIndexState(table, indexedColumn, value);\r\n      return indices.map((key) => {\r\n        return [key, Database.getCell(table, key, relatedColumn)] as const;\r\n      })\r\n    }, [table, indexedColumn, value, relatedColumn]);\r\n    \r\n    const initialValue = useRef<(readonly [KeyType<T>, ColumnType<T, CRel>])[]>(null) as MutableRefObject<(readonly [KeyType<T>, ColumnType<T, CRel>])[]>;\r\n    if (initialValue.current === null) {\r\n      initialValue.current = getRelatedValues();\r\n    }\r\n    const [relatedValues, setRelatedValues] = useState(initialValue.current);\r\n\r\n    const onDatabaseChange = useCallback(() => {\r\n      setRelatedValues(getRelatedValues());\r\n    }, [getRelatedValues, setRelatedValues]);\r\n\r\n    useEffect(() => {\r\n      Database.addIndexListener(table, value, indexedColumn, onDatabaseChange);\r\n      for (const [key] of relatedValues) {\r\n        Database.addCellListener(table, key, relatedColumn, onDatabaseChange);\r\n      }\r\n\r\n      return () => {\r\n        Database.removeIndexListener(table, value, indexedColumn, onDatabaseChange);\r\n        for (const [key] of relatedValues) {\r\n          Database.removeCellListener(table, key, relatedColumn, onDatabaseChange);\r\n        }\r\n      }\r\n    }, [relatedValues, table, indexedColumn, value, relatedColumn, onDatabaseChange]);\r\n\r\n    return [relatedValues];\r\n  },\r\n\r\n  createRow<T extends Tables>(table: T, initialValues?: OptionalTuple<ColumnTypes<T>>) {\r\n    return Database.createRow(table, initialValues);\r\n  },\r\n\r\n  generateDefaultRow<T extends Tables>(table: T): OptionalTuple<ColumnTypes<T>> {\r\n    return Array(Database.getTableColumnCount(table)).fill(undefined) as OptionalTuple<ColumnTypes<T>>;\r\n  },\r\n\r\n  getCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C) {\r\n    return Database.getCell(table, key, column);\r\n  },\r\n  \r\n  setCellState<T extends Tables, C extends ColumnDef<T>>(table: T, key: KeyType<T>, column: C, value: ColumnType<T, C>) {\r\n    Database.setCell(table, key, column, value);\r\n  },\r\n\r\n  getIndexState<T extends Tables, C extends ColumnDef<T>>(table: T, column: C, value: ColumnType<T, C>) {\r\n    return Database.getIndex(table, column, value);\r\n  }\r\n}\r\n\r\nexport default DatabaseOps;","import { CompletionStatus, CompletionStatusType, getCompletionStatusKey } from \"../data/CompletionStatus\";\r\nimport { JobType } from \"../data/JobType\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { JobColumn } from \"../database/tables/JobTable\";\r\nimport { StatusTableColumns } from \"../database/tables/StatusTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst JobOps = {\r\n  useName(jobId: string) {\r\n    return DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.NAME);\r\n  },\r\n\r\n  useDescription(jobId: string) {\r\n    return DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.DESCRIPTION);\r\n  },\r\n\r\n  useJobType(jobId: string) {\r\n    return DatabaseOps.useReadonlyCellState(Tables.Jobs, jobId, JobColumn.JOB_TYPE);\r\n  },\r\n\r\n  useDueDate(jobId: string) {\r\n    return DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.DUE_DATE);\r\n  },\r\n\r\n  useTimeSpent(jobId: string) {\r\n    return DatabaseOps.useReadonlyCellState(Tables.Jobs, jobId, JobColumn.MINUTES_SPENT);\r\n  },\r\n\r\n  useChildTasks(projectId: string) {\r\n    const [childTasks] = DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_TASK_OF, projectId);\r\n    return [childTasks];\r\n  },\r\n\r\n  useRootTasks() {\r\n    return DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_TASK_OF, \"\");\r\n  },\r\n\r\n  useChildProjects(projectId: string) {\r\n    // TODO - Pass in filtering/sorting settings.\r\n    return DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_PROJECT_OF, projectId);\r\n  },\r\n\r\n  useRootProjects() {\r\n    // TODO: pass in filtering/sorting settings.\r\n    return DatabaseOps.useIndexState(Tables.Jobs, JobColumn.CHILD_PROJECT_OF, \"\");\r\n  },\r\n\r\n  createRootProject() {\r\n    return JobOps.createChildProject(\"\");\r\n  },\r\n\r\n  createRootTask() {\r\n    return JobOps.createChildTask(\"\");\r\n  },\r\n\r\n  createChildProject(projectId?: string) {\r\n    // TODO: Use a Record instead of Tuple so we can specify arbitrary parameters.\r\n    const defaultValues = DatabaseOps.generateDefaultRow(Tables.Jobs);\r\n    defaultValues[JobColumn.JOB_TYPE] = JobType.Project;\r\n    defaultValues[JobColumn.CHILD_PROJECT_OF] = projectId;\r\n    const jobId = DatabaseOps.createRow(Tables.Jobs, defaultValues);\r\n\r\n    // Also set a completion status by default.\r\n    const completionStatusValue = DatabaseOps.generateDefaultRow(Tables.Status);\r\n    completionStatusValue[StatusTableColumns.JOB_ID] = jobId;\r\n    completionStatusValue[StatusTableColumns.STATUS_TYPE] = CompletionStatusType;\r\n    completionStatusValue[StatusTableColumns.STATUS_VALUE] = getCompletionStatusKey(CompletionStatus.Planned);\r\n    DatabaseOps.createRow(Tables.Status, completionStatusValue);\r\n  },\r\n\r\n  createChildTask(projectId?: string) {\r\n    const defaultValues = DatabaseOps.generateDefaultRow(Tables.Jobs);\r\n    defaultValues[JobColumn.JOB_TYPE] = JobType.Task;\r\n    defaultValues[JobColumn.CHILD_TASK_OF] = projectId;\r\n    const jobId = DatabaseOps.createRow(Tables.Jobs, defaultValues);\r\n\r\n    // Also set a completion status by default.\r\n    const completionStatusValue = DatabaseOps.generateDefaultRow(Tables.Status);\r\n    completionStatusValue[StatusTableColumns.JOB_ID] = jobId;\r\n    completionStatusValue[StatusTableColumns.STATUS_TYPE] = CompletionStatusType;\r\n    completionStatusValue[StatusTableColumns.STATUS_VALUE] = getCompletionStatusKey(CompletionStatus.Planned);\r\n    DatabaseOps.createRow(Tables.Status, completionStatusValue);\r\n  },\r\n}\r\n\r\nexport default JobOps;","import LocalDatabase, { Tables } from \"../database/LocalDatabase\";\r\nimport { StatusDefinitionColumn } from \"../database/tables/StatusDefinitionTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst StatusDefinitionOps = {\r\n  useStatusName(statusType: string, key: string) {\r\n    const type = LocalDatabase.getCell(Tables.StatusDefinitions, key, StatusDefinitionColumn.TYPE);\r\n    console.assert(type !== undefined, \"No status definition with key \", key, \" exists\");\r\n    console.assert(type === statusType, \"The status definition key \", key, \" does not belong to type\", statusType);\r\n    return DatabaseOps.useCellState(Tables.StatusDefinitions, key, StatusDefinitionColumn.NAME);\r\n  },\r\n\r\n  /**\r\n   * Returns a list of all possible values for a particular status.\r\n   * @param statusType The type of status to retrieve\r\n   * @returns List of all status values\r\n   */\r\n  useAllStatusValuesAndNames(statusType: string) {\r\n    return DatabaseOps.useRelatedIndexState(Tables.StatusDefinitions, StatusDefinitionColumn.TYPE, statusType, StatusDefinitionColumn.NAME);\r\n  },\r\n}\r\n\r\nexport default StatusDefinitionOps;","import { useMemo } from \"react\";\r\nimport { CompletionStatusType } from \"../data/CompletionStatus\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { StatusTableColumns } from \"../database/tables/StatusTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst StatusOps = {\r\n  useCompletionStatus(jobId: string) {\r\n    // TODO: Remove once we implement dual-indices\r\n    const completionStatusId = useMemo(() => {\r\n      const statusIdsForJob = DatabaseOps.getIndexState(Tables.Status, StatusTableColumns.JOB_ID, jobId);\r\n      for (const statusId of statusIdsForJob) {\r\n        const statusType = DatabaseOps.getCellState(Tables.Status, statusId, StatusTableColumns.STATUS_TYPE);\r\n        if (statusType === CompletionStatusType) {\r\n          return statusId;\r\n        }\r\n      }\r\n      // This shouldn't happen because we always create a completion status entry when creating a new job.\r\n      console.warn(\"No completion status for job\", jobId);\r\n      return \"\";\r\n    }, [jobId]);\r\n    return DatabaseOps.useCellState(Tables.Status, completionStatusId, StatusTableColumns.STATUS_VALUE);\r\n  }\r\n}\r\n\r\nexport default StatusOps;","import { useCallback } from \"react\";\r\nimport { CompletionStatus, CompletionStatusType, getCompletionStatusKey, getCompletionStatusName } from \"../../data/CompletionStatus\";\r\nimport StatusDefinitionOps from \"../../operations/StatusDefinitionOps\";\r\nimport StatusOps from \"../../operations/StatusOps\";\r\nimport \"./CompletionStatusField.css\";\r\n\r\ninterface ICompletionStatusFieldProps {\r\n  id: string,\r\n}\r\n\r\nconst CompletionStatusField = ({ id }: ICompletionStatusFieldProps) => {\r\n  const [completionStatus, setCompletionStatus] = StatusOps.useCompletionStatus(id);\r\n  const [statusValuesAndNames] = StatusDefinitionOps.useAllStatusValuesAndNames(CompletionStatusType);\r\n\r\n  const setCheckboxStatus: React.ChangeEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    setCompletionStatus(getCompletionStatusKey(e.currentTarget.checked ? CompletionStatus.Completed : CompletionStatus.InProgress));\r\n  }, [setCompletionStatus]);\r\n\r\n  const setSelectStatus: React.ChangeEventHandler<HTMLSelectElement> = useCallback((e) => {\r\n    setCompletionStatus(e.currentTarget.value);\r\n  }, [setCompletionStatus]);\r\n\r\n  return <div className=\"completion-status-field\">\r\n    <input type=\"checkbox\" checked={completionStatus === getCompletionStatusKey(CompletionStatus.Completed)}\r\n      onChange={ setCheckboxStatus } />\r\n    <select onChange={setSelectStatus} value={completionStatus}>\r\n      {\r\n        statusValuesAndNames.map(([value, name], index) => <option value={value} key={index}>\r\n          {name}\r\n        </option>)\r\n      }\r\n    </select>\r\n  </div>\r\n};\r\n\r\nexport default CompletionStatusField;","import { useCallback } from \"react\";\r\nimport { Tables } from \"../../database/LocalDatabase\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport \"./CompletionStatusField.css\";\r\n\r\ninterface IDueDateFieldProps {\r\n  id: string,\r\n}\r\n\r\nconst DueDateField = ({ id }: IDueDateFieldProps) => {\r\n  const [dueDate, setDueDate] = JobOps.useDueDate(id);\r\n\r\n  const onChangeDueDate: React.ChangeEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    console.log(e.currentTarget.valueAsDate);\r\n    setDueDate(e.currentTarget.valueAsDate!);\r\n  }, [setDueDate]);\r\n\r\n  return <div className=\"completion-status-field\">\r\n    <input type=\"date\" value={dueDate.toISOString().substr(0, 10)} onChange={onChangeDueDate} />\r\n  </div>\r\n};\r\n\r\nexport default DueDateField;","import { useCallback } from \"react\";\r\nimport { Tables } from \"../database/LocalDatabase\";\r\nimport { JobColumn } from \"../database/tables/JobTable\";\r\nimport { TimeLogColumns } from \"../database/tables/TimeLogTable\";\r\nimport DatabaseOps from \"./DatabaseOps\";\r\n\r\nconst TimeLogOps = {\r\n  useLoggedTime(jobId: string) {\r\n    const [currentTime] = DatabaseOps.useCellState(Tables.Jobs, jobId, JobColumn.MINUTES_SPENT);\r\n\r\n    const logTime = (duration: number) => {\r\n      TimeLogOps.createTimeLogEntry(jobId, duration);\r\n    }\r\n\r\n    return [currentTime, logTime] as const;\r\n  },\r\n\r\n  useEntryIdsForJob(jobId: string) {\r\n    return DatabaseOps.useIndexState(Tables.TimeLog, TimeLogColumns.JOB_ID, jobId);\r\n  },\r\n\r\n  useEntryValues(jobId: string) {\r\n    return DatabaseOps.useRelatedIndexState(Tables.TimeLog, TimeLogColumns.JOB_ID, jobId, TimeLogColumns.VALUE);\r\n  },\r\n\r\n  useDescription(logId: string) {\r\n    return DatabaseOps.useCellState(Tables.TimeLog, logId, TimeLogColumns.DESCRIPTION);\r\n  },\r\n\r\n  useTimeValue(logId: string) {\r\n    // TODO: Need to update the job time value as well.\r\n    const [timeValue, setTimeValue] = DatabaseOps.useCellState(Tables.TimeLog, logId, TimeLogColumns.VALUE);\r\n\r\n    const updateTimeValue = useCallback((newValue: number) => {\r\n      setTimeValue(newValue);\r\n      // Need to update the time spent for all affected tasks and projects.\r\n      const taskId = DatabaseOps.getCellState(Tables.TimeLog, logId, TimeLogColumns.JOB_ID);\r\n      TimeLogOps.updateTimeSpentForJobs(taskId, newValue, timeValue);\r\n    }, [logId, timeValue, setTimeValue]);\r\n\r\n    return [timeValue, updateTimeValue] as const;\r\n  },\r\n\r\n  createTimeLogEntry(taskId: string, duration: number, description: string = \"\") {\r\n    TimeLogOps.updateTimeSpentForJobs(taskId, duration, 0);\r\n\r\n    const entryRow = DatabaseOps.generateDefaultRow(Tables.TimeLog);\r\n    entryRow[TimeLogColumns.JOB_ID] = taskId;\r\n    entryRow[TimeLogColumns.VALUE] = duration;\r\n    entryRow[TimeLogColumns.DESCRIPTION] = description;\r\n    DatabaseOps.createRow(Tables.TimeLog, entryRow);\r\n  },\r\n\r\n  updateTimeSpentForJobs(taskId: string, newDuration: number, previousDuration: number) {\r\n    const diff = newDuration - previousDuration;\r\n\r\n    const currentTime = DatabaseOps.getCellState(Tables.Jobs, taskId, JobColumn.MINUTES_SPENT);\r\n    DatabaseOps.setCellState(Tables.Jobs, taskId, JobColumn.MINUTES_SPENT, currentTime + diff);\r\n\r\n    let projectAncestorId = DatabaseOps.getCellState(Tables.Jobs, taskId, JobColumn.CHILD_TASK_OF);\r\n    while (projectAncestorId !== undefined) {\r\n      const currentTime = DatabaseOps.getCellState(Tables.Jobs, projectAncestorId, JobColumn.MINUTES_SPENT);\r\n      DatabaseOps.setCellState(Tables.Jobs, projectAncestorId, JobColumn.MINUTES_SPENT, currentTime + diff);\r\n      projectAncestorId = DatabaseOps.getCellState(Tables.Jobs, projectAncestorId, JobColumn.CHILD_PROJECT_OF);\r\n    }\r\n  }\r\n}\r\n\r\nexport default TimeLogOps;","import { forwardRef, useCallback } from \"react\";\r\nimport \"./DurationField.css\";\r\n\r\ninterface IDurationFieldParams {\r\n  time: number,\r\n  setTime?: (newTime: number) => void,\r\n  readonly: boolean,\r\n  className?: string,\r\n  ref?: React.MutableRefObject<HTMLInputElement | null>,\r\n}\r\n\r\nconst DurationField = forwardRef(({\r\n  time, setTime, readonly, className\r\n}: IDurationFieldParams, ref: React.ForwardedRef<HTMLInputElement | null>) => {\r\n  const minutes = time % 60;\r\n  const hours = (time - minutes) / 60;\r\n\r\n  const setInputHours: React.FormEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    if (setTime) {\r\n      setTime(60 * e.currentTarget.valueAsNumber + minutes);\r\n    }\r\n  }, [setTime, minutes]);\r\n\r\n  const setInputMinutes: React.FormEventHandler<HTMLInputElement> = useCallback((e) => {\r\n    if (setTime) {\r\n      setTime(60 * hours + e.currentTarget.valueAsNumber);\r\n    }\r\n  }, [setTime, hours]);\r\n\r\n  return <div className={`${className}`}>\r\n    <input className=\"duration-field-input\" type=\"number\" min={0} max={23} step={1} value={hours} onChange={setInputHours} readOnly={readonly} ref={ref}/>Hr\r\n    <input className=\"duration-field-input\" type=\"number\" min={0} max={59} step={5} value={minutes} onChange={setInputMinutes} readOnly={readonly} />Min\r\n  </div>\r\n})\r\n\r\nexport default DurationField;","import { useCallback, useMemo } from \"react\";\r\nimport \"./TextInputField.css\";\r\n\r\ninterface ITextInputField {\r\n  multiRow?: boolean,\r\n  className?: string,\r\n  editMode: boolean,\r\n  setEditMode?: (editMode: boolean) => void,\r\n  setEditModeOnFocus?: boolean,\r\n  value: string,\r\n  setValue?: (newValue: string) => void,\r\n  onFocus?: () => void,\r\n  onBlur?: () => void,\r\n  minRows?: number,\r\n  maxRows?: number,\r\n}\r\n\r\nconst TextInputField = (params: ITextInputField) => {\r\n  const onChange: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = useCallback((e) => {\r\n    if (params.setValue) {\r\n      params.setValue(e.currentTarget.value);\r\n    }\r\n  }, [params.setValue]);\r\n\r\n  let rows = useMemo(() => (params.value.match(/\\n/g) || []).length + 1, [params.value]);\r\n  if (params.minRows !== undefined && rows < params.minRows) {\r\n    rows = params.minRows;\r\n  }\r\n  if (params.maxRows !== undefined && rows > params.maxRows) {\r\n    rows = params.maxRows;\r\n  }\r\n\r\n  const defaultOnFocus = useCallback(() => {\r\n    if (params.setEditMode !== undefined) {\r\n      params.setEditMode(true);\r\n    }\r\n  }, [params.setEditMode]);\r\n\r\n  const defaultOnBlur = useCallback(() => {\r\n    if (params.setEditMode !== undefined) {\r\n      params.setEditMode(false);\r\n    }\r\n  }, [params.setEditMode]);\r\n\r\n  if (params.multiRow) {\r\n    return <textarea\r\n      value={params.value}\r\n      onChange={onChange}\r\n      readOnly={!params.editMode}\r\n      className={`${params.className || \"\"} ${!params.editMode ? \"text-input-field-readonly\" : \"\"}`}\r\n      onFocus={params.onFocus && !params.setEditModeOnFocus ? params.onFocus : defaultOnFocus}\r\n      onBlur={params.onBlur && !params.setEditModeOnFocus ? params.onBlur : defaultOnBlur}\r\n      rows={rows}\r\n    />\r\n  } else {\r\n    return <input\r\n      value={params.value}\r\n      onChange={onChange}\r\n      readOnly={!params.editMode}\r\n      className={`${params.className || \"\"} ${!params.editMode ? \"text-input-field-readonly\" : \"\"}`}\r\n      onFocus={params.onFocus && !params.setEditModeOnFocus ? params.onFocus : defaultOnFocus}\r\n      onBlur={params.onBlur && !params.setEditModeOnFocus ? params.onBlur : defaultOnBlur}\r\n    />\r\n  }\r\n}\r\n\r\nexport default TextInputField;","import { useCallback, useEffect, useRef } from \"react\"\r\nimport DurationField from \"./DurationField\"\r\nimport TextInputField from \"./TextInputField\"\r\nimport \"./TimeLogField.css\"\r\n\r\ninterface ITimeLogFieldParams {\r\n  duration: number,\r\n  setDuration?: (newDuration: number) => void,\r\n  description: string,\r\n  setDescription?: (newDescription: string) => void,\r\n  editMode: boolean,\r\n  allowToggleEditMode?: boolean,\r\n  onSetEditable?: () => void,\r\n  onSubmit?: () => void,\r\n  onSetReadonly?: () => void,\r\n  allowDelete?: boolean,\r\n  onDelete?: () => void,\r\n  className?: string\r\n}\r\n\r\nconst TimeLogField = ({\r\n  duration, setDuration, description, setDescription, editMode, allowToggleEditMode, onSetEditable, onSubmit, onSetReadonly, allowDelete, onDelete,\r\n  className,\r\n}: ITimeLogFieldParams) => {\r\n\r\n  const durationRef: React.MutableRefObject<HTMLInputElement | null> = useRef(null);\r\n  const editButtonRef: React.MutableRefObject<HTMLButtonElement | null> = useRef(null);\r\n\r\n  const onSave = useCallback(() => {\r\n    if (onSubmit !== undefined) {\r\n      onSubmit();\r\n    }\r\n    if (allowToggleEditMode && onSetReadonly !== undefined) {\r\n      onSetReadonly();\r\n    }\r\n    editButtonRef.current?.focus();\r\n  }, [onSubmit, allowToggleEditMode, onSetReadonly]);\r\n\r\n  const onClickEditButton = useCallback(() => {\r\n    if (allowToggleEditMode && onSetEditable) {\r\n      onSetEditable();\r\n    }\r\n    durationRef.current?.focus();\r\n    durationRef.current?.select();\r\n  }, [allowToggleEditMode, onSetEditable, durationRef]);\r\n\r\n  const onClickCancelButton = useCallback(() => {\r\n    if (onSetReadonly) {\r\n      onSetReadonly();\r\n    }\r\n    editButtonRef.current?.focus();\r\n  }, [onSetReadonly])\r\n\r\n  useEffect(() => {\r\n    if (editMode) {\r\n      durationRef.current?.focus();\r\n      durationRef.current?.select();\r\n    }\r\n  }, [editMode]);\r\n\r\n  return <div className={`${className || \"\"} time-log-field`}>\r\n    <div className=\"time-log-field-upper\">\r\n      <DurationField time={duration} setTime={setDuration} readonly={!editMode} className=\"time-log-field-duration\" ref={durationRef} />\r\n      <TextInputField\r\n        editMode={editMode}\r\n        value={description}\r\n        setValue={setDescription}\r\n        multiRow={false}\r\n        className=\"time-log-field-description\"\r\n      />\r\n    </div>\r\n    <div className=\"time-log-field-lower\">\r\n      <button onClick={onClickEditButton} hidden={editMode || !allowToggleEditMode} className=\"time-log-field-button\" ref={editButtonRef}>Edit</button>\r\n      <button onClick={onSave} hidden={!editMode} className=\"time-log-field-button\">Save</button>\r\n      <button onClick={onClickCancelButton} hidden={!editMode || !allowToggleEditMode}className=\"time-log-field-button\">Cancel</button>\r\n      <button onClick={onDelete} hidden={!allowDelete || editMode} className=\"time-log-field-button\">Delete</button>\r\n    </div>\r\n  </div>\r\n};\r\n\r\nexport default TimeLogField;\r\n","import { useCallback, useState } from \"react\";\r\nimport TimeLogOps from \"../../../operations/TimeLogOps\";\r\nimport TimeLogField from \"../../fields/TimeLogField\";\r\nimport \"./TimeLogEntryNew.css\";\r\n\r\ninterface ITimeLogEntryNew {\r\n  taskId: string,\r\n  onLog?: () => void;\r\n  className?: string,\r\n}\r\n\r\nconst TimeLogEntryNew = ({ taskId, onLog, className }: ITimeLogEntryNew) => {\r\n  const [time, setTime] = useState(15);\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const logInputTime = useCallback(() => {\r\n    TimeLogOps.createTimeLogEntry(taskId, time, description);\r\n    if (onLog) {\r\n      onLog();\r\n    }\r\n  }, [taskId, time, description, onLog]);\r\n\r\n  return <TimeLogField\r\n    description={description} setDescription={setDescription}\r\n    duration={time} setDuration={setTime}\r\n    editMode={true}\r\n    onSubmit={logInputTime}\r\n    className={className}\r\n  />;\r\n}\r\n\r\nexport default TimeLogEntryNew;","import React, { useCallback, useRef, useState } from \"react\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport \"./DescriptionField.css\";\r\nimport TextInputField from \"./TextInputField\";\r\n\r\ninterface IDescriptionFieldParams {\r\n  id: string,\r\n}\r\n\r\nconst DescriptionField = ({\r\n  id\r\n}: IDescriptionFieldParams) => {\r\n  const [description, setDescription] = JobOps.useDescription(id);\r\n  const [editMode, setEditMode] = useState(false);\r\n  \r\n  return <TextInputField\r\n    multiRow\r\n    className=\"descriptionfield-input-field\"\r\n    editMode={editMode}\r\n    setEditMode={setEditMode}\r\n    setEditModeOnFocus\r\n    value={description}\r\n    minRows={5}\r\n    maxRows={20}\r\n    setValue={setDescription}\r\n  />\r\n};\r\n\r\nexport default DescriptionField;","import { useState } from \"react\";\r\nimport JobOps from \"../../operations/JobOps\";\r\nimport \"./NameField.css\";\r\nimport TextInputField from \"./TextInputField\";\r\n\r\ninterface INameFieldParams {\r\n  id: string,\r\n}\r\n\r\nconst NameField = ({\r\n  id\r\n}: INameFieldParams) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [name, setName] = JobOps.useName(id);\r\n\r\n  return <TextInputField\r\n    className=\"namefield-input-field\"\r\n    editMode={editMode}\r\n    setValue={setName}\r\n    value={name}\r\n    setEditMode={setEditMode}\r\n    setEditModeOnFocus\r\n  />\r\n};\r\n\r\nexport default NameField;","import React, { useCallback, useState } from \"react\";\r\n\r\n// Note to self: When creating a new hook, make sure to update package.json as well.\r\n\r\nexport function useToggleState(initialValue: boolean) {\r\n  const [state, setState] = useState(initialValue);\r\n  const toggleState = useCallback(() => {\r\n    setState(!state);\r\n  }, [state, setState]);\r\n  const enableState = useCallback(() => {\r\n    setState(true);\r\n  }, [setState]);\r\n  const disableState = useCallback(() => {\r\n    setState(false);\r\n  }, [setState])\r\n  return [state, enableState, disableState, toggleState] as const;\r\n}\r\n\r\nexport function useOnContainerBlur(onBlur: (() => void) | undefined, deps: React.DependencyList): React.FocusEventHandler {\r\n  return useCallback(onBlur ? (e) => {\r\n    if (e.relatedTarget === null || !e.currentTarget.contains(e.relatedTarget as Node)) {\r\n      onBlur();\r\n    }\r\n  } : () => { }, [...deps]);\r\n}\r\n\r\nexport function useSaveableState<T>(valueFromSave: T, setValueFromSave: (newValue: T) => void, allowExternalUpdates: boolean) {\r\n  const [savedValue, setSavedValue] = useState(valueFromSave);\r\n  if (savedValue !== valueFromSave) {\r\n    setSavedValue(valueFromSave);\r\n  }\r\n\r\n  const [localValue, setLocalValue] = useState(valueFromSave);\r\n  if (valueFromSave !== localValue && allowExternalUpdates) {\r\n    setLocalValue(valueFromSave);\r\n  }\r\n\r\n  const saveValue = useCallback((newValue: T) => {\r\n    setValueFromSave(newValue);\r\n  }, [setValueFromSave]);\r\n\r\n  return [localValue, setLocalValue, saveValue] as const;\r\n}","export function formatDuration(duration: number) {\r\n  return `${duration >= 60 ? `${Math.floor(duration / 60)}hr ` : \"\"}${duration % 60}min`\r\n}","import { useCallback } from \"react\";\r\nimport TimeLogOps from \"../../../operations/TimeLogOps\";\r\nimport { useSaveableState, useToggleState } from \"../../../operations/UtilityHooks\";\r\nimport TimeLogField from \"../../fields/TimeLogField\";\r\nimport \"./TimeLogEntry.css\";\r\n\r\ninterface ITimeLogEntryParams {\r\n  timeLogId: string,\r\n}\r\n\r\nconst TimeLogEntry = ({timeLogId}: ITimeLogEntryParams) => {  \r\n  const [editMode, setEditable, setReadonly] = useToggleState(false);\r\n\r\n  const [description, setLocalDescription, saveDescription] = useSaveableState(...TimeLogOps.useDescription(timeLogId), !editMode);\r\n  const [timeValue, setLocalTimeValue, saveTimeValue] = useSaveableState(...TimeLogOps.useTimeValue(timeLogId), !editMode);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    saveDescription(description);\r\n    saveTimeValue(timeValue);\r\n  }, [description, timeValue, saveDescription, saveTimeValue]);\r\n\r\n  return <TimeLogField\r\n    description={description} setDescription={setLocalDescription}\r\n    duration={timeValue} setDuration={setLocalTimeValue}\r\n    editMode={editMode} allowToggleEditMode\r\n    onSetEditable={setEditable}\r\n    onSetReadonly={setReadonly}\r\n    onSubmit={onSubmit}\r\n    allowDelete\r\n  />\r\n}\r\n\r\nexport default TimeLogEntry;","import { useState } from \"react\";\r\nimport { JobType } from \"../../../data/JobType\";\r\nimport JobOps from \"../../../operations/JobOps\";\r\nimport TimeLogOps from \"../../../operations/TimeLogOps\"\r\nimport { useToggleState } from \"../../../operations/UtilityHooks\";\r\nimport { formatDuration } from \"../../../utility/StringUtility\";\r\nimport TimeLogEntryNew from \"./TimeLogEntryNew\";\r\nimport TimeLogEntry from \"./TimeLogEntry\";\r\nimport \"./TimeLogList.css\";\r\n\r\ninterface ITimeLogListParams {\r\n  jobId: string,\r\n}\r\n\r\nconst TimeLogList = ({ jobId, }: ITimeLogListParams) => {\r\n  const [jobType] = JobOps.useJobType(jobId);\r\n\r\n  const [timeLogEntries] = TimeLogOps.useEntryIdsForJob(jobId);\r\n  const [timeSpent] = JobOps.useTimeSpent(jobId);\r\n\r\n  const [isNewEntryShown, , hideNewEntry, toggleNewEntry] = useToggleState(false);\r\n\r\n  return <div className=\"time-log-list\">\r\n    <div className=\"time-log-list-header\">\r\n      <h3 className=\"time-log-list-header-title\">Logged Time</h3>\r\n      <p className=\"time-log-list-header-time-spent\">Total: {formatDuration(timeSpent)}</p>\r\n      {\r\n        jobType === JobType.Task ? <button onClick={toggleNewEntry} className=\"time-log-list-header-new-log-button\">Log Time</button> : undefined\r\n      }\r\n    </div>\r\n    {\r\n      isNewEntryShown ? <TimeLogEntryNew taskId={jobId} onLog={hideNewEntry} className=\"time-log-list-header-new-log-entry\" /> : undefined\r\n    }\r\n    <div className=\"time-log-list-entries\">\r\n      {\r\n        timeLogEntries.map((entryId, index) => <TimeLogEntry key={index} timeLogId={entryId} />)\r\n      }\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default TimeLogList;","import \"./PopupContainer.css\";\r\nimport ReactModal from \"react-modal\";\r\n\r\ninterface IPopupContainerParams {\r\n  isOpen: boolean,\r\n  onClose: () => void,\r\n  children: React.ReactNode,\r\n  className?: string,\r\n  showCloseButton?: boolean,\r\n  onRequestClose?: () => void,\r\n  closeOnEsc?: boolean,\r\n  closeOnOverlayClick?: boolean,\r\n}\r\n\r\nconst PopupContainer = ({ isOpen, onClose, children, className, showCloseButton, onRequestClose, closeOnEsc, closeOnOverlayClick }: IPopupContainerParams) => {\r\n  return <ReactModal\r\n    isOpen={isOpen}\r\n    className={`${className ? className : undefined} form-popup`}\r\n    appElement={document.body}\r\n    shouldCloseOnEsc={closeOnEsc}\r\n    shouldCloseOnOverlayClick={closeOnOverlayClick}\r\n    onRequestClose={onRequestClose}\r\n  >\r\n    {\r\n      showCloseButton ? <button onClick={onClose} className=\"form-popup-close\">Close</button> : undefined\r\n    }\r\n    {children}\r\n  </ReactModal>\r\n}\r\n\r\nexport default PopupContainer;","import DescriptionField from \"../../fields/DescriptionField\";\r\nimport NameField from \"../../fields/NameField\";\r\nimport TimeLogList from \"../timelog/TimeLogList\";\r\nimport \"./JobPopup.css\";\r\nimport PopupContainer from \"../../popup/PopupContainer\";\r\n\r\ninterface IJobPopupParams {\r\n  jobId: string,\r\n  onClose: () => void,\r\n  isOpen: boolean\r\n}\r\n\r\nconst JobPopup = ({ jobId, onClose, isOpen }: IJobPopupParams) => {\r\n  return <PopupContainer\r\n    isOpen={isOpen} className=\"job-popup\"\r\n    onClose={onClose} showCloseButton onRequestClose={onClose}\r\n    closeOnEsc closeOnOverlayClick\r\n  >\r\n    <NameField id={jobId} />\r\n    <DescriptionField id={jobId} />\r\n    <TimeLogList jobId={jobId} />\r\n  </PopupContainer>;\r\n}\r\n\r\nexport default JobPopup;","import { useCallback, useState } from \"react\";\r\nimport JobOps from \"../../../operations/JobOps\";\r\nimport CompletionStatusField from \"../../fields/CompletionStatusField\";\r\nimport DueDateField from \"../../fields/DueDateField\";\r\nimport TimeLogEntryNew from \"../timelog/TimeLogEntryNew\";\r\nimport JobPopup from \"./JobPopup\";\r\nimport \"./TaskLine.css\";\r\nimport \"./JobLine.css\";\r\nimport { useOnContainerBlur, useToggleState } from \"../../../operations/UtilityHooks\";\r\nimport { formatDuration } from \"../../../utility/StringUtility\";\r\nimport PopupContainer from \"../../popup/PopupContainer\";\r\n\r\ninterface ITaskLineParams {\r\n  taskId: string,\r\n}\r\n\r\nconst TaskLine = ({ taskId }: ITaskLineParams) => {\r\n  const [name] = JobOps.useName(taskId);\r\n  const [description] = JobOps.useDescription(taskId);\r\n\r\n  const [timeSpent] = JobOps.useTimeSpent(taskId);\r\n\r\n  const [bodyVisible, setBodyVisible] = useState(true);\r\n  const toggleBodyVisible = useCallback(() => {\r\n    setBodyVisible(!bodyVisible);\r\n  }, [bodyVisible]);\r\n\r\n  const [isPopupOpen, openPopup, closePopup] = useToggleState(false);\r\n  const [isTimeLogWidgetOpen, showTimeLogWidget, closeTimeLogWidget] = useToggleState(false);\r\n  //const widgetOnBlur = useOnContainerBlur(closeTimeLogWidget, [closeTimeLogWidget]);\r\n\r\n  return <div className=\"task\">\r\n    <div className=\"task-header\">\r\n      <div className=\"task-header-left\" onClick={toggleBodyVisible}>\r\n        {\r\n          name === \"\" ? <p>(Unnamed Task)</p> : <p>{name}</p>\r\n        }\r\n      </div>\r\n      <div className=\"task-header-right\">\r\n        <CompletionStatusField id={taskId} />\r\n        <button className=\"job-button\" onClick={openPopup}>Edit</button>\r\n        <DueDateField id={taskId} />\r\n        <div>\r\n          <button onClick={isTimeLogWidgetOpen ? closeTimeLogWidget : showTimeLogWidget} className=\"time-log-widget-button job-button\">Log Time</button>\r\n          {\r\n            <PopupContainer isOpen={isTimeLogWidgetOpen} onClose={closeTimeLogWidget} onRequestClose={closeTimeLogWidget} closeOnEsc closeOnOverlayClick>\r\n              <div>\r\n                <TimeLogEntryNew taskId={taskId} onLog={closeTimeLogWidget} />\r\n              </div>\r\n            </PopupContainer>\r\n          }\r\n        </div>\r\n        <button className=\"job-button\">Est. Time</button>\r\n      </div>\r\n    </div>\r\n    <div className={`task-body ${bodyVisible ? \"\" : \"hidden\"}`}>\r\n      <div className=\"task-description\">\r\n        <p>{description === \"\" ? \"(No Description)\" : description}</p>\r\n      </div>\r\n      <p>Time Spent: {formatDuration(timeSpent)}</p>\r\n    </div>\r\n    <JobPopup jobId={taskId} onClose={closePopup} isOpen={isPopupOpen} />\r\n  </div>\r\n}\r\n\r\nexport default TaskLine;","import React, { useCallback, useState } from \"react\";\r\nimport TaskLine from \"./TaskLine\";\r\nimport \"./ProjectLine.css\"\r\nimport PopupContainer from \"../../popup/PopupContainer\";\r\nimport CompletionStatusField from \"../../fields/CompletionStatusField\";\r\nimport JobOps from \"../../../operations/JobOps\";\r\nimport JobPopup from \"./JobPopup\";\r\nimport \"./JobLine.css\";\r\n\r\ninterface IProjectLineParams {\r\n  projectId: string,\r\n}\r\n\r\nconst ProjectLine = ({ projectId }: IProjectLineParams) => {\r\n  const [name, setName] = JobOps.useName(projectId);\r\n  const [description, setDescription] = JobOps.useDescription(projectId);\r\n  const [childTaskIds] = JobOps.useChildTasks(projectId);\r\n  const [childProjectIds] = JobOps.useChildProjects(projectId);\r\n\r\n  const [bodyVisible, setBodyVisible] = useState(true);\r\n  const toggleBodyVisible = useCallback(() => {\r\n    setBodyVisible(!bodyVisible);\r\n  }, [bodyVisible]);\r\n\r\n  const onCreateChildProject = useCallback(() => {\r\n    JobOps.createChildProject(projectId);\r\n    setBodyVisible(true);\r\n  }, [projectId, setBodyVisible]);\r\n\r\n  const onCreateChildTask = useCallback(() => {\r\n    JobOps.createChildTask(projectId);\r\n    setBodyVisible(true);\r\n  }, [projectId, setBodyVisible]);\r\n\r\n  const [isPopupOpen, setPopupOpen] = useState(false);\r\n  const openPopup = useCallback(() => {\r\n    setPopupOpen(true);\r\n  }, [setPopupOpen]);\r\n  const closePopup = useCallback(() => {\r\n    setPopupOpen(false);\r\n  }, [setPopupOpen]);\r\n\r\n  return <div className=\"project\">\r\n    <div className=\"project-header\">\r\n      <div className=\"project-header-left\">\r\n        <div className=\"project-namefield\" onClick={toggleBodyVisible}>\r\n          {\r\n            name === \"\" ? <p>(Unnamed Project)</p> : <p>{name}</p>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"project-header-right\">\r\n        <button className=\"job-button\" onClick={onCreateChildProject}>Add Project</button>\r\n        <button className=\"job-button\" onClick={onCreateChildTask}>Add Task</button>\r\n        <CompletionStatusField id={projectId}/>\r\n        <button className=\"job-button\" onClick={openPopup}>Edit</button>\r\n      </div>\r\n    </div>\r\n    <div className={`project-body ${bodyVisible ? \"\" : \"hidden\"}`}>\r\n      <div className=\"project-data\">\r\n        <div className=\"project-description\">\r\n          {\r\n            description === \"\" ? <p>(No Description)</p> : <p>{description}</p>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"project-tasks\">\r\n        {\r\n          childTaskIds.map((taskId, index) => {\r\n            return <React.Fragment key={index}>\r\n              <TaskLine taskId={taskId} />\r\n            </React.Fragment>\r\n          })\r\n        }\r\n      </div>\r\n      <div className=\"project-children\">\r\n        {\r\n          childProjectIds.map((projectId, index) => {\r\n            return <React.Fragment key={index}>\r\n              <ProjectLine projectId={projectId} />\r\n            </React.Fragment>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n    <JobPopup jobId={projectId} isOpen={isPopupOpen} onClose={closePopup} />\r\n  </div>\r\n}\r\n\r\nexport default ProjectLine;","import React, { useCallback, useState } from \"react\";\r\nimport ProjectLine from \"./jobs/ProjectLine\";\r\nimport TaskLine from \"./jobs/TaskLine\";\r\nimport \"./Body.css\";\r\nimport JobOps from \"../../operations/JobOps\";\r\n\r\nconst Body = () => {\r\n  const [taskIds] = JobOps.useRootTasks();\r\n  const [rootProjects] = JobOps.useRootProjects();\r\n\r\n  const onCreateChildProject = useCallback(() => {\r\n    JobOps.createRootProject();\r\n  }, []);\r\n\r\n  const onCreateChildTask = useCallback(() => {\r\n    JobOps.createRootTask();\r\n  }, []);\r\n\r\n  return <div className=\"body\">\r\n    <div className=\"project-header-right\">\r\n      <button className=\"project-button\" onClick={onCreateChildProject}>Add Project</button>\r\n      <button className=\"project-button\" onClick={onCreateChildTask}>Add Task</button>\r\n    </div>\r\n\r\n    <div className=\"body-tasks\">\r\n      {\r\n        taskIds ? taskIds.map((taskId, index) => {\r\n          return <TaskLine taskId={taskId} key={index} />\r\n        }) : undefined\r\n      }\r\n    </div>\r\n    <div className=\"body-projects\">\r\n      {\r\n        rootProjects.map((projectId, index) => {\r\n          return <ProjectLine projectId={projectId} key={index} />\r\n        })\r\n      }\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport default Body;\r\n","import './App.css';\nimport Body from './components/body/Body';\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <h1>Task Manager</h1>\n      <Body />\n    </div>\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}